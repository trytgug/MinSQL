[
  {
    "db_id": "concert_singer",
    "question": "How many singers do we have?",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the total number of singers?",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "country",
        "age"
      ],
      "concert": [
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "stadium": [
        "stadium_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "stadium": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "schema": {
      "singer": [
        "name",
        "country",
        "age",
        "singer_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "schema": {
      "singer": [
        "age",
        "name",
        "country",
        "singer_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "year",
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "capacity",
        "highest",
        "lowest",
        "average",
        "stadium_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average, minimum, and maximum age of all singers from France?",
    "schema": {
      "singer": [
        "country",
        "age",
        "singer_id"
      ],
      "stadium": [
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [
          "France"
        ],
        [],
        []
      ],
      "stadium": [
        []
      ],
      "concert": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average, minimum, and maximum age for all French singers?",
    "schema": {
      "singer": [
        "country",
        "age",
        "singer_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "stadium_id",
        "year",
        "concert_id"
      ],
      "stadium": [
        "capacity",
        "location",
        "name",
        "stadium_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show the name and the release year of the song by the youngest singer.",
    "schema": {
      "singer": [
        "name",
        "song_release_year",
        "singer_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_name",
        "year",
        "concert_id",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "schema": {
      "singer": [
        "age",
        "name",
        "song_release_year",
        "singer_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are all distinct countries where singers above age 20 are from?",
    "schema": {
      "singer": [
        "country",
        "age",
        "singer_id",
        "name"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "stadium_id",
        "year"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are  the different countries with singers above age 20?",
    "schema": {
      "singer": [
        "country",
        "age",
        "singer_id",
        "name"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "year",
        "stadium_id",
        "concert_id",
        "concert_name"
      ],
      "stadium": [
        "location",
        "capacity",
        "highest",
        "lowest",
        "stadium_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show all countries and the number of singers in each country.",
    "schema": {
      "singer": [
        "country",
        "singer_id",
        "name",
        "song_name"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "stadium_id",
        "concert_name",
        "theme"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "How many singers are from each country?",
    "schema": {
      "singer": [
        "country",
        "singer_id",
        "name",
        "song_name"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "stadium_id",
        "concert_name",
        "theme"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "List all song names by singers above the average age.",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are all the song names by singers who are older than average?",
    "schema": {
      "singer": [
        "song_name",
        "age",
        "singer_id",
        "name"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "schema": {
      "stadium": [
        "location",
        "name",
        "capacity",
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_name",
        "theme",
        "concert_id"
      ],
      "singer": [
        "name",
        "country",
        "song_name",
        "song_release_year",
        "singer_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "schema": {
      "stadium": [
        "location",
        "name",
        "capacity",
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "schema": {
      "stadium": [
        "capacity",
        "average",
        "highest",
        "lowest",
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id",
        "concert_name",
        "theme"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the average and maximum capacities for all stadiums ?",
    "schema": {
      "stadium": [
        "capacity",
        "average",
        "highest",
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id",
        "concert_name",
        "theme"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "schema": {
      "stadium": [
        "name",
        "capacity",
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        []
      ],
      "concert": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "schema": {
      "stadium": [
        "name",
        "capacity",
        "stadium_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "singer": [
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        []
      ],
      "concert": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "How many concerts are there in year 2014 or 2015?",
    "schema": {
      "concert": [
        "year",
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "How many concerts occurred in 2014 or 2015?",
    "schema": {
      "concert": [
        "year",
        "concert_id",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id",
        "name"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        []
      ],
      "stadium": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show the stadium name and the number of concerts in each stadium.",
    "schema": {
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "For each stadium, how many concerts play there?",
    "schema": {
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
    "schema": {
      "concert": [
        "concert_name",
        "stadium_id",
        "year",
        "concert_id"
      ],
      "stadium": [
        "name",
        "capacity",
        "stadium_id",
        "location"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
    "schema": {
      "concert": [
        "stadium_id",
        "concert_name",
        "year",
        "concert_id"
      ],
      "stadium": [
        "name",
        "capacity",
        "stadium_id",
        "location"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "name",
        "singer_id",
        "country",
        "song_name"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Which year has most number of concerts?",
    "schema": {
      "concert": [
        "year",
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "stadium": [
        "stadium_id"
      ],
      "singer": [
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "stadium": [
        []
      ],
      "singer": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the year that had the most concerts?",
    "schema": {
      "concert": [
        "year",
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show the stadium names without any concert.",
    "schema": {
      "stadium": [
        "stadium_id",
        "name",
        "location",
        "capacity"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of the stadiums without any concerts?",
    "schema": {
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "schema": {
      "singer": [
        "country",
        "age",
        "singer_id",
        "name"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "stadium_id",
        "year",
        "concert_name"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "capacity",
        "highest"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
    "schema": {
      "concert": [
        "concert_name",
        "year",
        "stadium_id",
        "concert_id"
      ],
      "stadium": [
        "name",
        "location",
        "capacity",
        "highest",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "name",
        "country",
        "song_name",
        "song_release_year",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of all stadiums that did not have a concert in 2014?",
    "schema": {
      "stadium": [
        "name",
        "stadium_id",
        "location",
        "capacity"
      ],
      "concert": [
        "stadium_id",
        "concert_id",
        "concert_name",
        "theme"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Show the name and theme for all concerts and the number of singers in each concert.",
    "schema": {
      "concert": [
        "concert_name",
        "theme",
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "name",
        "singer_id",
        "country"
      ],
      "stadium": [
        "name",
        "stadium_id",
        "location"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names , themes , and number of singers for every concert ?",
    "schema": {
      "concert": [
        "concert_name",
        "theme",
        "concert_id",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "name",
        "song_name",
        "singer_id",
        "country"
      ]
    },
    "fk": [
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "List singer names and number of concerts for each singer.",
    "schema": {
      "singer": [
        "name",
        "singer_id",
        "age",
        "country"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of the singers and number of concerts for each person?",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "concert": [
        "concert_id",
        "concert_name",
        "theme",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "stadium": [
        "stadium_id",
        "location",
        "name",
        "capacity"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "List all singer names in concerts in year 2014.",
    "schema": {
      "concert": [
        "year",
        "concert_id",
        "concert_name",
        "theme"
      ],
      "singer": [
        "name",
        "singer_id",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names of the singers who performed in a concert in 2014?",
    "schema": {
      "concert": [
        "concert_name",
        "year",
        "concert_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "name",
        "singer_id",
        "song_name",
        "song_release_year"
      ]
    },
    "fk": [
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "schema": {
      "singer": [
        "name",
        "country",
        "song_name",
        "song_release_year",
        "singer_id"
      ],
      "concert": [
        "stadium_id",
        "concert_id"
      ],
      "singer_in_concert": [
        "singer_id",
        "concert_id"
      ],
      "stadium": [
        "stadium_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "stadium": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "schema": {
      "singer": [
        "song_name",
        "name",
        "country",
        "singer_id"
      ]
    },
    "fk": [],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
    "schema": {
      "concert": [
        "concert_name",
        "year",
        "stadium_id",
        "concert_id"
      ],
      "stadium": [
        "name",
        "location",
        "stadium_id",
        "capacity"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "name",
        "country",
        "song_name",
        "song_release_year",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
    "schema": {
      "concert": [
        "concert_name",
        "stadium_id",
        "year",
        "concert_id"
      ],
      "stadium": [
        "name",
        "location",
        "stadium_id"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "concert": [
        [],
        [],
        [],
        []
      ],
      "stadium": [
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "Find the number of concerts happened in the stadium with the highest capacity .",
    "schema": {
      "stadium": [
        "stadium_id",
        "capacity",
        "location",
        "name"
      ],
      "concert": [
        "concert_id",
        "stadium_id",
        "concert_name",
        "theme"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "concert_singer",
    "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
    "schema": {
      "stadium": [
        "capacity",
        "stadium_id",
        "location",
        "name"
      ],
      "concert": [
        "concert_id",
        "stadium_id",
        "concert_name",
        "theme"
      ],
      "singer": [
        "singer_id",
        "name",
        "country",
        "song_name"
      ],
      "singer_in_concert": [
        "concert_id",
        "singer_id"
      ]
    },
    "fk": [
      "concert.stadium_id = stadium.stadium_id",
      "singer_in_concert.singer_id = singer.singer_id",
      "singer_in_concert.concert_id = concert.concert_id"
    ],
    "db_contents": {
      "stadium": [
        [],
        [],
        [],
        []
      ],
      "concert": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ],
      "singer_in_concert": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of pets whose weight is heavier than 10.",
    "schema": {
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "How many pets have a greater weight than 10?",
    "schema": {
      "pets": [
        "weight",
        "petid",
        "pettype",
        "pet_age"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the weight of the youngest dog.",
    "schema": {
      "pets": [
        "pet_age",
        "petid",
        "pettype",
        "weight"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [
          "dog"
        ],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "How much does the youngest dog weigh?",
    "schema": {
      "pets": [
        "pettype",
        "pet_age",
        "weight",
        "petid"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [
          "dog"
        ],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "schema": {
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "List the maximum weight and type for each type of pet.",
    "schema": {
      "pets": [
        "pettype",
        "weight",
        "petid",
        "pet_age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find number of pets owned by students who are older than 20.",
    "schema": {
      "student": [
        "stuid",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "How many pets are owned by students that have an age greater than 20?",
    "schema": {
      "student": [
        "stuid",
        "fname",
        "lname",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of dog pets that are raised by female students (with sex F).",
    "schema": {
      "student": [
        "sex",
        "stuid",
        "fname",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [
          "dog"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "How many dog pets are raised by female students?",
    "schema": {
      "student": [
        "sex",
        "stuid",
        "lname",
        "fname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "pettype",
        "petid",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [
          "dog"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of distinct type of pets.",
    "schema": {
      "pets": [
        "pettype",
        "petid",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ]
    },
    "fk": [
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "How many different types of pet are there?",
    "schema": {
      "pets": [
        "pettype",
        "petid",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name of students who have cat or dog pet.",
    "schema": {
      "pets": [
        "pettype",
        "petid"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "fname",
        "stuid"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [
          "cat",
          "dog"
        ],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What are the first names of every student who has a cat or dog as a pet?",
    "schema": {
      "student": [
        "fname",
        "stuid",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "pettype",
        "petid",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [
          "cat",
          "dog"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name of students who have both cat and dog pets .",
    "schema": {
      "student": [
        "fname",
        "stuid",
        "lname",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [
          "cat",
          "dog"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What are the students' first names who have both cats and dogs as pets?",
    "schema": {
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "fname",
        "lname",
        "age"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ],
      "pets": [
        [],
        [
          "cat",
          "dog"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the major and age of students who do not have a cat pet.",
    "schema": {
      "student": [
        "major",
        "age",
        "stuid"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "pettype",
        "petid",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [
          "cat"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
    "schema": {
      "student": [
        "major",
        "stuid",
        "lname",
        "fname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "pettype",
        "petid",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [
          "cat"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the id of students who do not have a cat pet.",
    "schema": {
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ],
      "pets": [
        [],
        [
          "cat"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What are the ids of the students who do not own cats as pets?",
    "schema": {
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname"
      ],
      "pets": [
        "petid",
        "pettype"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        []
      ],
      "pets": [
        [],
        [
          "cat"
        ]
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "schema": {
      "student": [
        "fname",
        "age",
        "stuid",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "pettype",
        "pet_age",
        "weight",
        "petid"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [
          "cat",
          "dog"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the first name of every student who has a dog but does not have a cat?",
    "schema": {
      "student": [
        "fname",
        "stuid",
        "lname",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [
          "cat",
          "dog"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the type and weight of the youngest pet.",
    "schema": {
      "pets": [
        "pettype",
        "pet_age",
        "weight",
        "petid"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "schema": {
      "pets": [
        "pettype",
        "pet_age",
        "weight",
        "petid"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "age",
        "stuid",
        "lname",
        "fname"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the id and weight of all pets whose age is older than 1.",
    "schema": {
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the id and weight of every pet who is older than 1?",
    "schema": {
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the average and maximum age for each type of pet.",
    "schema": {
      "pets": [
        "pettype",
        "pet_age",
        "petid"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the average and maximum age for each pet type?",
    "schema": {
      "pets": [
        "pettype",
        "pet_age",
        "weight",
        "petid"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the average weight for each pet type.",
    "schema": {
      "pets": [
        "petid",
        "pettype",
        "weight",
        "pet_age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the average weight for each type of pet?",
    "schema": {
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name and age of students who have a pet.",
    "schema": {
      "student": [
        "stuid",
        "fname",
        "age",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What are the different first names and ages of the students who do have pets?",
    "schema": {
      "student": [
        "fname",
        "age",
        "stuid",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the id of the pet owned by student whose last name is 'Smith'.",
    "schema": {
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [
          "Smith"
        ],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
    "schema": {
      "student": [
        "lname",
        "stuid",
        "fname",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [
          "Smith"
        ],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the number of pets for each student who has any pet and student id.",
    "schema": {
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
    "schema": {
      "student": [
        "stuid",
        "major",
        "fname",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the first name and gender of student who have more than one pet.",
    "schema": {
      "student": [
        "stuid",
        "fname",
        "sex",
        "lname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the first name and gender of the all the students who have more than one pet?",
    "schema": {
      "student": [
        "fname",
        "sex",
        "stuid"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the last name of the student who has a cat that is age 3.",
    "schema": {
      "pets": [
        "pettype",
        "pet_age",
        "petid"
      ],
      "has_pet": [
        "petid",
        "stuid"
      ],
      "student": [
        "lname",
        "stuid",
        "fname",
        "age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "pets": [
        [
          "cat"
        ],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the last name of the student who has a cat that is 3 years old?",
    "schema": {
      "has_pet": [
        "stuid",
        "petid"
      ],
      "student": [
        "stuid",
        "lname"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "has_pet": [
        [],
        []
      ],
      "student": [
        [],
        []
      ],
      "pets": [
        [],
        [
          "cat"
        ],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "Find the average age of students who do not have any pet .",
    "schema": {
      "student": [
        "stuid",
        "lname",
        "fname",
        "age"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "pets_1",
    "question": "What is the average age for all students who do not own any pets ?",
    "schema": {
      "student": [
        "age",
        "stuid",
        "lname",
        "fname"
      ],
      "has_pet": [
        "stuid",
        "petid"
      ],
      "pets": [
        "petid",
        "pettype",
        "pet_age",
        "weight"
      ]
    },
    "fk": [
      "has_pet.stuid = student.stuid",
      "has_pet.petid = pets.petid"
    ],
    "db_contents": {
      "student": [
        [],
        [],
        [],
        []
      ],
      "has_pet": [
        [],
        []
      ],
      "pets": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many continents are there?",
    "schema": {
      "continents": [
        "contid",
        "continent"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "continents": [
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of continents?",
    "schema": {
      "continents": [
        "contid",
        "continent"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "continents": [
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
    "schema": {
      "continents": [
        "contid"
      ],
      "countries": [
        "continent",
        "countryname",
        "countryid"
      ],
      "car_makers": [
        "country",
        "id"
      ],
      "model_list": [
        "maker"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "continents": [
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "model_list": [
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "For each continent, list its id, name, and how many countries it has?",
    "schema": {
      "continents": [
        "contid",
        "continent"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "continents": [
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many countries are listed?",
    "schema": {
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "continents": [
        "contid",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "continents": [
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many countries exist?",
    "schema": {
      "countries": [
        "countryname",
        "countryid",
        "continent"
      ]
    },
    "fk": [],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many models does each car maker produce? List maker full name, id and the number.",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the full name of each car maker, along with its id and how many models it produces?",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which model of the car has the minimum horsepower?",
    "schema": {
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [],
    "db_contents": {
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the model of the car with the smallest amount of horsepower?",
    "schema": {
      "cars_data": [
        "horsepower",
        "id"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "model",
        "makeid"
      ],
      "car_makers": [
        "id",
        "maker"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Find the model of the car whose weight is below the average weight.",
    "schema": {
      "cars_data": [
        "weight",
        "id"
      ],
      "model_list": [
        "modelid",
        "model",
        "maker"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the model for the car with a weight smaller than the average?",
    "schema": {
      "cars_data": [
        "weight",
        "id",
        "mpg",
        "cylinders"
      ],
      "car_names": [
        "model",
        "makeid",
        "make"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Find the name of the makers that produced some cars in the year of 1970?",
    "schema": {
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the name of the different car makers who produced a car in 1970?",
    "schema": {
      "car_makers": [
        "maker",
        "id"
      ],
      "cars_data": [
        "year",
        "id"
      ],
      "model_list": [
        "maker",
        "model",
        "modelid"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "car_makers": [
        [],
        []
      ],
      "cars_data": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Find the make and production time of the cars that were produced in the earliest year?",
    "schema": {
      "cars_data": [
        "year",
        "id"
      ],
      "car_makers": [
        "id",
        "maker"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "make",
        "makeid",
        "model"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the maker of the carr produced in the earliest year and what year was it?",
    "schema": {
      "car_makers": [
        "maker",
        "country"
      ],
      "cars_data": [
        "year"
      ]
    },
    "fk": [],
    "db_contents": {
      "car_makers": [
        [],
        []
      ],
      "cars_data": [
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which distinct car models are the produced after 1980?",
    "schema": {
      "model_list": [
        "maker",
        "model"
      ],
      "cars_data": [
        "year",
        "id"
      ],
      "car_names": [
        "model",
        "makeid"
      ],
      "car_makers": [
        "id"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        []
      ],
      "cars_data": [
        [],
        []
      ],
      "car_names": [
        [],
        []
      ],
      "car_makers": [
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the different models for the cards produced after 1980?",
    "schema": {
      "cars_data": [
        "year",
        "id"
      ],
      "model_list": [
        "model",
        "modelid",
        "maker"
      ],
      "car_names": [
        "model",
        "makeid"
      ],
      "car_makers": [
        "id",
        "maker"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many car makers are there in each continents? List the continent name and the count.",
    "schema": {
      "continents": [
        "contid",
        "continent"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid"
    ],
    "db_contents": {
      "continents": [
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the name of each continent and how many car makers are there in each one?",
    "schema": {
      "continents": [
        "contid",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "country"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "continents": [
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which of the countries has the most car makers? List the country name.",
    "schema": {
      "car_makers": [
        "country",
        "maker",
        "id",
        "fullname"
      ],
      "countries": [
        "countryname",
        "countryid",
        "continent"
      ],
      "continents": [
        "continent",
        "contid"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "continents": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the name of the country with the most car makers?",
    "schema": {
      "car_makers": [
        "country",
        "id",
        "maker",
        "fullname"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
    "schema": {
      "car_makers": [
        "fullname",
        "id",
        "maker",
        "country"
      ],
      "model_list": [
        "maker",
        "modelid"
      ],
      "continents": [
        "contid"
      ],
      "countries": [
        "continent",
        "countryid"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        []
      ],
      "continents": [
        []
      ],
      "countries": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
    "schema": {
      "car_makers": [
        "maker",
        "fullname",
        "id",
        "country"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
    "schema": {
      "car_names": [
        "make",
        "model",
        "makeid"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "cars_data": [
        "accelerate",
        "id",
        "mpg",
        "cylinders"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_names": [
        [
          "amc hornet",
          "amc hornet sportabout (sw)"
        ],
        [
          "amc"
        ],
        []
      ],
      "model_list": [
        [],
        [],
        [
          "amc"
        ]
      ],
      "car_makers": [
        [
          "amc"
        ],
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
    "schema": {
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_names": [
        [],
        [
          "amc"
        ],
        [
          "amc hornet",
          "amc hornet sportabout (sw)"
        ]
      ],
      "model_list": [
        [],
        [],
        [
          "amc"
        ]
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many car makers are there in france?",
    "schema": {
      "countries": [
        "countryid",
        "countryname"
      ],
      "car_makers": [
        "id",
        "maker",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        [
          "france"
        ]
      ],
      "car_makers": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of makers of care in France?",
    "schema": {
      "countries": [
        "countryname",
        "countryid"
      ],
      "car_makers": [
        "maker",
        "country"
      ],
      "car_names": [
        "make",
        "makeid",
        "model"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid"
    ],
    "db_contents": {
      "countries": [
        [
          "france"
        ],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many car models are produced in the usa?",
    "schema": {
      "countries": [
        "countryname",
        "continent",
        "countryid"
      ],
      "car_makers": [
        "country",
        "id"
      ],
      "model_list": [
        "maker",
        "model"
      ],
      "car_names": [
        "model"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [
          "usa"
        ],
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "model_list": [
        [],
        []
      ],
      "car_names": [
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the count of the car models produced in the United States?",
    "schema": {
      "countries": [
        "countryname",
        "countryid"
      ],
      "car_makers": [
        "country",
        "maker",
        "id"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "model",
        "makeid"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "schema": {
      "cars_data": [
        "mpg",
        "cylinders",
        "id",
        "edispl"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "schema": {
      "cars_data": [
        "mpg",
        "cylinders",
        "id",
        "edispl"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "schema": {
      "cars_data": [
        "weight",
        "cylinders",
        "year",
        "id"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "schema": {
      "cars_data": [
        "weight",
        "cylinders",
        "year",
        "id"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are all the makers and models?",
    "schema": {
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the makers and models?",
    "schema": {
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the countries having at least one car maker? List name and id.",
    "schema": {
      "car_makers": [
        "country",
        "id",
        "maker",
        "fullname"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "continents": [
        "contid",
        "continent"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "continents": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all countries with at least one car maker?",
    "schema": {
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of the cars with horsepower more than 150?",
    "schema": {
      "cars_data": [
        "horsepower",
        "id",
        "mpg",
        "cylinders"
      ],
      "car_makers": [
        "id",
        "maker"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "makeid",
        "model"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of cars with a horsepower greater than 150?",
    "schema": {
      "cars_data": [
        "horsepower",
        "id"
      ],
      "car_makers": [
        "id",
        "maker"
      ],
      "car_names": [
        "makeid",
        "model"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "car_names": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average weight of cars each year?",
    "schema": {
      "cars_data": [
        "year",
        "weight",
        "id",
        "mpg"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average weight and year for each year?",
    "schema": {
      "cars_data": [
        "weight",
        "year",
        "id",
        "mpg"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which countries in europe have at least 3 car manufacturers?",
    "schema": {
      "continents": [
        "continent",
        "contid"
      ],
      "countries": [
        "countryname",
        "continent",
        "countryid"
      ],
      "car_makers": [
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid"
    ],
    "db_contents": {
      "continents": [
        [
          "europe"
        ],
        []
      ],
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the names of all European countries with at least 3 manufacturers?",
    "schema": {
      "countries": [
        "countryname",
        "continent",
        "countryid"
      ],
      "car_makers": [
        "maker",
        "country",
        "id"
      ],
      "continents": [
        "continent",
        "contid"
      ],
      "model_list": [
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ],
      "continents": [
        [
          "europe"
        ],
        []
      ],
      "model_list": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
    "schema": {
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "cylinders",
        "horsepower"
      ],
      "car_makers": [
        "maker",
        "id"
      ],
      "car_names": [
        "model",
        "makeid"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        []
      ],
      "car_names": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
    "schema": {
      "cars_data": [
        "mpg",
        "id",
        "cylinders",
        "edispl"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the car model with the highest mpg ?",
    "schema": {
      "cars_data": [
        "mpg",
        "id",
        "cylinders",
        "edispl"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average horsepower of the cars before 1980?",
    "schema": {
      "cars_data": [
        "horsepower",
        "id",
        "mpg",
        "cylinders"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average horsepower for all cars produced before 1980 ?",
    "schema": {
      "cars_data": [
        "horsepower",
        "year",
        "id",
        "mpg"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average edispl of the cars of model volvo?",
    "schema": {
      "model_list": [
        "maker",
        "model",
        "modelid"
      ],
      "car_makers": [
        "maker",
        "fullname",
        "country",
        "id"
      ],
      "car_names": [
        "model",
        "make",
        "makeid"
      ],
      "cars_data": [
        "edispl",
        "id",
        "mpg",
        "cylinders"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        [
          "volvo"
        ],
        []
      ],
      "car_makers": [
        [
          "volvo"
        ],
        [
          "Volvo"
        ],
        [],
        []
      ],
      "car_names": [
        [
          "volvo"
        ],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the average edispl for all volvos?",
    "schema": {
      "car_makers": [
        "maker",
        "id"
      ],
      "model_list": [
        "maker",
        "model",
        "modelid"
      ],
      "car_names": [
        "model",
        "makeid",
        "make"
      ],
      "cars_data": [
        "edispl",
        "id",
        "mpg",
        "cylinders"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [
          "volvo"
        ],
        []
      ],
      "model_list": [
        [],
        [
          "volvo"
        ],
        []
      ],
      "car_names": [
        [
          "volvo"
        ],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum accelerate for different number of cylinders?",
    "schema": {
      "cars_data": [
        "accelerate",
        "cylinders",
        "id",
        "mpg"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum accelerate for all the different cylinders?",
    "schema": {
      "cars_data": [
        "accelerate",
        "cylinders",
        "id",
        "mpg"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which model has the most version(make) of cars?",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What model has the most different versions?",
    "schema": {
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "model",
        "makeid",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many cars have more than 4 cylinders?",
    "schema": {
      "cars_data": [
        "cylinders",
        "id",
        "mpg",
        "edispl"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of cars with more than 4 cylinders?",
    "schema": {
      "cars_data": [
        "cylinders",
        "id",
        "mpg",
        "edispl"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "how many cars were produced in 1980?",
    "schema": {
      "cars_data": [
        "year",
        "id",
        "mpg",
        "cylinders"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "In 1980, how many cars were made?",
    "schema": {
      "cars_data": [
        "year",
        "id",
        "mpg",
        "cylinders"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many car models were produced by the maker with full name American Motor Company?",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "continents": [
        "contid",
        "continent"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [
          "American Motor Company"
        ],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "continents": [
        [],
        [
          "america"
        ]
      ],
      "countries": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of car models created by the car maker American Motor Company?",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [
          "American Motor Company"
        ],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which makers designed more than 3 car models? List full name and the id.",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the names and ids of all makers with more than 3 models?",
    "schema": {
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
    "schema": {
      "car_makers": [
        "fullname",
        "maker",
        "country",
        "id"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "cars_data": [
        "weight",
        "id",
        "mpg",
        "cylinders"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [
          "General Motors"
        ],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
    "schema": {
      "car_makers": [
        "maker",
        "fullname",
        "id",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [
          "General Motors"
        ],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "schema": {
      "cars_data": [
        "year",
        "weight",
        "id"
      ],
      "car_names": [
        "make",
        "model",
        "makeid"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_makers": [
        "fullname",
        "country",
        "id"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "schema": {
      "cars_data": [
        "year",
        "weight",
        "id",
        "mpg"
      ],
      "model_list": [
        "model",
        "maker",
        "modelid"
      ],
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the horsepower of the car with the largest accelerate?",
    "schema": {
      "cars_data": [
        "horsepower",
        "accelerate",
        "id",
        "mpg"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the horsepower of the car with the greatest accelerate?",
    "schema": {
      "cars_data": [
        "horsepower",
        "accelerate",
        "id",
        "mpg"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "schema": {
      "model_list": [
        "maker",
        "model"
      ],
      "car_names": [
        "model",
        "make",
        "makeid"
      ],
      "car_makers": [
        "maker",
        "id"
      ],
      "cars_data": [
        "cylinders",
        "accelerate",
        "id"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        [
          "volvo"
        ]
      ],
      "car_names": [
        [
          "volvo"
        ],
        [],
        []
      ],
      "car_makers": [
        [
          "volvo"
        ],
        []
      ],
      "cars_data": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "schema": {
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        [],
        [
          "volvo"
        ]
      ],
      "car_makers": [
        [],
        [
          "volvo"
        ],
        [
          "Volvo"
        ],
        []
      ],
      "car_names": [
        [],
        [
          "volvo"
        ],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "schema": {
      "cars_data": [
        "accelerate",
        "horsepower",
        "id",
        "mpg"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "schema": {
      "cars_data": [
        "horsepower",
        "accelerate",
        "id",
        "mpg"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many countries has more than 2 car makers ?",
    "schema": {
      "countries": [
        "countryname",
        "countryid",
        "continent"
      ],
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of countries with more than 2 car makers ?",
    "schema": {
      "countries": [
        "countryid",
        "countryname"
      ],
      "car_makers": [
        "country",
        "id",
        "maker"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ],
      "car_names": [
        "model",
        "makeid"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "How many cars has over 6 cylinders?",
    "schema": {
      "cars_data": [
        "cylinders",
        "id",
        "mpg",
        "edispl"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the number of carsw ith over 6 cylinders?",
    "schema": {
      "cars_data": [
        "cylinders",
        "id",
        "mpg",
        "edispl"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
    "schema": {
      "cars_data": [
        "cylinders",
        "horsepower",
        "id",
        "mpg"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
    "schema": {
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
    "schema": {
      "cars_data": [
        "horsepower",
        "cylinders",
        "id"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
    "schema": {
      "cars_data": [
        "horsepower",
        "cylinders",
        "id"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "car_names": [
        "makeid",
        "make",
        "model"
      ],
      "model_list": [
        "maker",
        "model",
        "modelid"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "schema": {
      "cars_data": [
        "mpg",
        "cylinders",
        "year"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_makers": [
        "maker",
        "id",
        "fullname",
        "country"
      ],
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "countries": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "schema": {
      "cars_data": [
        "mpg",
        "cylinders",
        "year",
        "id"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
    "schema": {
      "model_list": [
        "model",
        "maker",
        "modelid"
      ],
      "car_names": [
        "model",
        "make",
        "makeid"
      ],
      "cars_data": [
        "weight",
        "id",
        "mpg",
        "cylinders"
      ]
    },
    "fk": [
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "model_list": [
        [
          "ford"
        ],
        [],
        []
      ],
      "car_names": [
        [
          "ford"
        ],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
    "schema": {
      "car_makers": [
        "maker",
        "id",
        "fullname"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [
          "ford"
        ],
        [],
        [
          "Ford Motor Company"
        ]
      ],
      "model_list": [
        [],
        [],
        [
          "ford"
        ]
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [
          "ford"
        ],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the name of the countries where there is not a single car maker?",
    "schema": {
      "countries": [
        "countryname",
        "countryid",
        "continent"
      ],
      "car_makers": [
        "country",
        "maker",
        "fullname",
        "id"
      ],
      "continents": [
        "contid",
        "continent"
      ],
      "model_list": [
        "maker",
        "modelid",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "continents": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the names of the countries with no car makers?",
    "schema": {
      "countries": [
        "countryname",
        "countryid",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "continents": [
        "contid",
        "continent"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ]
    },
    "fk": [
      "countries.continent = continents.contid",
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "continents": [
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
    "schema": {
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ],
      "cars_data": [
        "id",
        "mpg",
        "cylinders",
        "edispl"
      ]
    },
    "fk": [
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model",
      "cars_data.id = car_names.makeid"
    ],
    "db_contents": {
      "car_makers": [
        [],
        [],
        [],
        []
      ],
      "model_list": [
        [],
        [],
        []
      ],
      "car_names": [
        [],
        [],
        []
      ],
      "cars_data": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
    "schema": {
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "model",
        "makeid",
        "make"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [
          "fiat"
        ],
        [
          "Fiat"
        ],
        []
      ],
      "model_list": [
        [],
        [],
        [
          "fiat"
        ]
      ],
      "car_names": [
        [
          "fiat"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "car_1",
    "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
    "schema": {
      "countries": [
        "countryid",
        "countryname",
        "continent"
      ],
      "car_makers": [
        "id",
        "maker",
        "fullname",
        "country"
      ],
      "model_list": [
        "modelid",
        "maker",
        "model"
      ],
      "car_names": [
        "makeid",
        "model",
        "make"
      ]
    },
    "fk": [
      "car_makers.country = countries.countryid",
      "model_list.maker = car_makers.id",
      "car_names.model = model_list.model"
    ],
    "db_contents": {
      "countries": [
        [],
        [],
        []
      ],
      "car_makers": [
        [],
        [
          "fiat"
        ],
        [
          "Fiat"
        ],
        []
      ],
      "model_list": [
        [],
        [],
        [
          "fiat"
        ]
      ],
      "car_names": [
        [],
        [
          "fiat"
        ],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "schema": {
      "airlines": [
        "airline",
        "country",
        "abbreviation",
        "uid"
      ],
      "airports": [
        "airportcode",
        "city",
        "country",
        "airportname"
      ],
      "flights": [
        "airline",
        "sourceairport",
        "destairport",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "JetBlue Airways"
        ],
        [],
        [
          "JetBlue"
        ],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What country is Jetblue Airways affiliated with?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportname",
        "country",
        "countryabbrev",
        "airportcode"
      ],
      "flights": [
        "airline",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "JetBlue Airways"
        ],
        [
          "JetBlue"
        ],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "schema": {
      "airlines": [
        "abbreviation",
        "airline",
        "uid",
        "country"
      ],
      "airports": [
        "airportcode",
        "countryabbrev",
        "city",
        "airportname"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "JetBlue"
        ],
        [
          "JetBlue Airways"
        ],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "schema": {
      "airlines": [
        "abbreviation",
        "airline",
        "uid"
      ],
      "airports": [
        "airportname",
        "airportcode",
        "country",
        "countryabbrev"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "JetBlue"
        ],
        [
          "JetBlue Airways"
        ],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "List all airline names and their abbreviations in \"USA\".",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "uid",
        "country"
      ],
      "airports": [
        "airportname",
        "airportcode",
        "city",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        [],
        [
          "USA"
        ]
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are the airline names and abbreviations for airlines in the USA?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation"
      ],
      "airports": [
        "airportcode"
      ],
      "flights": [
        "airline",
        "destairport",
        "sourceairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        []
      ],
      "airports": [
        []
      ],
      "flights": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "List the airport code and name in the city of Anthony.",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Anthony"
        ],
        [],
        [
          "Anthony"
        ],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the airport code and airport name corresonding to the city Anthony.",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Anthony"
        ],
        [],
        [
          "Anthony"
        ],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many airlines do we have?",
    "schema": {
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the total number of airlines?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "uid",
        "country"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "airline",
        "sourceairport",
        "destairport",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many airports do we have?",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of  airports.",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights do we have?",
    "schema": {
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of flights.",
    "schema": {
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airline has abbreviation 'UAL'?",
    "schema": {
      "airlines": [
        "abbreviation",
        "airline"
      ],
      "airports": [
        "countryabbrev",
        "airportcode",
        "city",
        "airportname"
      ],
      "flights": [
        "airline",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "UAL"
        ],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the airline with abbreviation 'UAL'.",
    "schema": {
      "airlines": [
        "abbreviation",
        "airline",
        "uid",
        "country"
      ],
      "airports": [
        "airportcode",
        "countryabbrev",
        "city",
        "airportname"
      ],
      "flights": [
        "airline",
        "destairport",
        "sourceairport",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "UAL"
        ],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many airlines are from USA?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        [
          "USA"
        ],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of airlines in the USA.",
    "schema": {
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "country",
        "airportcode",
        "airportname",
        "city"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        [],
        [
          "USA"
        ]
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which city and country is the Alton airport at?",
    "schema": {
      "airports": [
        "city",
        "country",
        "airportname",
        "airportcode"
      ],
      "airlines": [],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Alton"
        ],
        [],
        [
          "Alton"
        ],
        []
      ],
      "airlines": [],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the city and country for the Alton airport.",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Alton"
        ],
        [],
        [
          "Alton"
        ],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the airport name for airport 'AKO'?",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "AKO"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [
          "AKO"
        ],
        [
          "AKO"
        ],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the name of the airport with code 'AKO'.",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "AKO"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [
          "AKO"
        ],
        [
          "AKO"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are airport names at City 'Aberdeen'?",
    "schema": {
      "airports": [
        "airportname",
        "city",
        "airportcode",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [
          "Aberdeen"
        ],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are the names of airports in Aberdeen?",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights depart from 'APG'?",
    "schema": {
      "flights": [
        "sourceairport",
        "airline",
        "flightno",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [
          "APG"
        ],
        [],
        [],
        [
          "APG"
        ]
      ],
      "airports": [
        [
          "APG"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of flights departing from 'APG'.",
    "schema": {
      "flights": [
        "sourceairport",
        "airline",
        "flightno",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [
          "APG"
        ],
        [],
        [],
        [
          "APG"
        ]
      ],
      "airports": [
        [
          "APG"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights have destination ATO?",
    "schema": {
      "flights": [
        "destairport",
        "airline",
        "flightno",
        "sourceairport"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [
          "ATO"
        ],
        [],
        [],
        [
          "ATO"
        ]
      ],
      "airports": [
        [
          "ATO"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of flights into ATO.",
    "schema": {
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [
          "ATO"
        ],
        [
          "ATO"
        ],
        [],
        []
      ],
      "airports": [
        [
          "ATO"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights depart from City Aberdeen?",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of flights departing from Aberdeen.",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights arriving in Aberdeen city?",
    "schema": {
      "flights": [
        "destairport",
        "airline",
        "flightno",
        "sourceairport"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [
          "Aberdeen"
        ],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of flights arriving in Aberdeen.",
    "schema": {
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ],
      "flights": [
        "destairport",
        "airline",
        "flightno",
        "sourceairport"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [
          "Aberdeen"
        ],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen",
          "Ashley"
        ],
        [],
        [
          "Ashley"
        ],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights fly from Aberdeen to Ashley?",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen",
          "Ashley"
        ],
        [],
        [
          "Ashley"
        ],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights does airline 'JetBlue Airways' have?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "uid",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [],
    "db_contents": {
      "airlines": [
        [
          "JetBlue Airways"
        ],
        [
          "JetBlue"
        ],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the number of Jetblue Airways flights.",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [
          "JetBlue Airways"
        ],
        [
          "JetBlue"
        ],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [
          "ASY"
        ],
        [
          "ASY"
        ]
      ],
      "airports": [
        [],
        [
          "ASY"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights arriving in ASY Airport.",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "uid",
        "country"
      ],
      "flights": [
        "airline",
        "destairport",
        "flightno",
        "sourceairport"
      ]
    },
    "fk": [],
    "db_contents": {
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [
          "ASY"
        ],
        [],
        [
          "ASY"
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
    "schema": {
      "flights": [
        "airline",
        "sourceairport",
        "flightno",
        "destairport"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [
          "AHD"
        ],
        [],
        [
          "AHD"
        ]
      ],
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        [],
        []
      ],
      "airports": [
        [
          "AHD"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Return the number of United Airlines flights leaving from AHD Airport.",
    "schema": {
      "flights": [
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline"
      ],
      "airports": [
        "airportcode"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [
          "AHD"
        ],
        [
          "AHD"
        ]
      ],
      "airlines": [
        [
          "United Airlines"
        ]
      ],
      "airports": [
        [
          "AHD"
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many United Airlines flights go to City 'Aberdeen'?",
    "schema": {
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which city has most number of arriving flights?",
    "schema": {
      "flights": [
        "destairport",
        "sourceairport"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which city has the most frequent destination airport?",
    "schema": {
      "flights": [
        "destairport",
        "sourceairport",
        "airline",
        "flightno"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which city has most number of departing flights?",
    "schema": {
      "flights": [
        "sourceairport",
        "airline",
        "flightno",
        "destairport"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which city is the most frequent source airport?",
    "schema": {
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the code of airport that has the highest number of flights?",
    "schema": {
      "flights": [
        "destairport",
        "sourceairport",
        "airline",
        "flightno"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "abbreviation",
        "airline",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the airport code of the airport with the most flights?",
    "schema": {
      "flights": [
        "destairport",
        "sourceairport",
        "airline"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the code of airport that has fewest number of flights?",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city"
      ],
      "flights": [
        "destairport",
        "sourceairport",
        "flightno"
      ],
      "airlines": [
        "airline",
        "abbreviation"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        []
      ],
      "airlines": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the code of the airport with the least flights.",
    "schema": {
      "flights": [
        "destairport",
        "sourceairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": []
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ],
      "airlines": []
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airline has most number of flights?",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What airline serves the most flights?",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline"
      ],
      "airports": [
        "airportcode"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        []
      ],
      "airports": [
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
    "schema": {
      "airlines": [
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "flightno"
      ]
    },
    "fk": [],
    "db_contents": {
      "airlines": [
        [],
        []
      ],
      "flights": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
    "schema": {
      "airlines": [
        "abbreviation",
        "airline",
        "uid",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [],
    "db_contents": {
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are airlines that have some flight departing from airport 'AHD'?",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [
          "AHD"
        ],
        [
          "AHD"
        ]
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "airports": [
        [
          "AHD"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with source airport AHD?",
    "schema": {
      "flights": [
        "sourceairport",
        "airline",
        "flightno",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [
          "AHD"
        ],
        [],
        [],
        [
          "AHD"
        ]
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "airports": [
        [
          "AHD"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are airlines that have flights arriving at airport 'AHD'?",
    "schema": {
      "flights": [
        "destairport",
        "airline",
        "flightno",
        "sourceairport"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [
          "AHD"
        ],
        [],
        [],
        [
          "AHD"
        ]
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [
          "AHD"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have a flight with destination airport AHD?",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [
          "AHD"
        ],
        [
          "AHD"
        ]
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [
          "AHD"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "city",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [
          "APG",
          "CVO"
        ],
        [
          "APG",
          "CVO"
        ]
      ],
      "airports": [
        [
          "APG",
          "CVO"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have departing flights from both APG and CVO airports?",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [
          "APG",
          "CVO"
        ],
        [
          "APG",
          "CVO"
        ]
      ],
      "airlines": [
        [],
        [],
        []
      ],
      "airports": [
        [],
        [
          "APG",
          "CVO"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline"
      ],
      "airports": [
        "airportcode"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [
          "APG",
          "CVO"
        ],
        [
          "APG",
          "CVO"
        ]
      ],
      "airlines": [
        []
      ],
      "airports": [
        [
          "APG",
          "CVO"
        ]
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have departures from CVO but not from APG airports?",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "APG",
          "CVO"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [
          "APG",
          "CVO"
        ],
        [
          "APG",
          "CVO"
        ]
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have at least 10 flights.",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have at least 10 flights?",
    "schema": {
      "flights": [
        "airline",
        "destairport",
        "flightno",
        "sourceairport"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find all airlines that have fewer than 200 flights.",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ],
      "flights": [
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "city",
        "country",
        "countryabbrev"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airlines have less than 200 flights?",
    "schema": {
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ],
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of Airline \"United Airlines\"?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "uid",
        "country"
      ],
      "flights": [
        "airline",
        "flightno",
        "sourceairport",
        "destairport"
      ]
    },
    "fk": [],
    "db_contents": {
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which flight numbers correspond to United Airlines flights?",
    "schema": {
      "airlines": [
        "airline",
        "abbreviation",
        "uid",
        "country"
      ],
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airlines": [
        [
          "United Airlines"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "schema": {
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [
          "APG"
        ],
        [
          "APG"
        ]
      ],
      "airports": [
        [
          "APG"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights leaving from APG.",
    "schema": {
      "flights": [
        "flightno",
        "sourceairport",
        "destairport",
        "airline"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ],
      "airports": [
        "airportcode",
        "country",
        "city",
        "airportname"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [
          "APG"
        ],
        [
          "APG"
        ],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [
          "APG"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "schema": {
      "flights": [
        "flightno",
        "destairport",
        "airline",
        "sourceairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city"
      ],
      "airlines": [
        "abbreviation",
        "airline",
        "uid",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [
          "APG"
        ],
        [],
        [
          "APG"
        ]
      ],
      "airports": [
        [
          "APG"
        ],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights landing at APG.",
    "schema": {
      "flights": [
        "flightno",
        "sourceairport",
        "destairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [
          "APG"
        ],
        [
          "APG"
        ]
      ],
      "airports": [
        [
          "APG"
        ],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights leaving from Aberdeen.",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [],
        [
          "Aberdeen"
        ],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "flightno",
        "airline",
        "sourceairport",
        "destairport"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Give the flight numbers of flights arriving in Aberdeen.",
    "schema": {
      "flights": [
        "flightno",
        "destairport",
        "airline",
        "sourceairport"
      ],
      "airports": [
        "airportcode",
        "airportname",
        "city"
      ],
      "airlines": [
        "airline",
        "uid",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airports": [
        [],
        [],
        [
          "Aberdeen"
        ]
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
    "schema": {
      "airports": [
        "city",
        "airportcode",
        "airportname",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [
          "Aberdeen",
          "Abilene"
        ],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "How many flights land in Aberdeen or Abilene?",
    "schema": {
      "flights": [
        "destairport",
        "sourceairport"
      ],
      "airports": [
        "airportcode",
        "city"
      ],
      "airlines": []
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "flights": [
        [],
        []
      ],
      "airports": [
        [],
        [
          "Aberdeen",
          "Abilene"
        ]
      ],
      "airlines": []
    }
  },
  {
    "db_id": "flight_2",
    "question": "Find the name of airports which do not have any flight in and out.",
    "schema": {
      "airports": [
        "airportname",
        "airportcode",
        "city",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ],
      "airlines": [
        "airline",
        "abbreviation",
        "country",
        "uid"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "flight_2",
    "question": "Which airports do not have departing or arriving flights?",
    "schema": {
      "airports": [
        "airportcode",
        "airportname",
        "city",
        "country"
      ],
      "flights": [
        "sourceairport",
        "destairport",
        "airline",
        "flightno"
      ],
      "airlines": [
        "uid",
        "airline",
        "abbreviation",
        "country"
      ]
    },
    "fk": [
      "flights.destairport = airports.airportcode",
      "flights.sourceairport = airports.airportcode"
    ],
    "db_contents": {
      "airports": [
        [],
        [],
        [],
        []
      ],
      "flights": [
        [],
        [],
        [],
        []
      ],
      "airlines": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "How many employees are there?",
    "schema": {
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of employees",
    "schema": {
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "employee_id",
        "shop_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Sort employee names by their age in ascending order.",
    "schema": {
      "employee": [
        "name",
        "age",
        "employee_id"
      ],
      "hiring": [
        "employee_id",
        "start_from",
        "is_full_time",
        "shop_id"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "List the names of employees and sort in ascending order of age.",
    "schema": {
      "employee": [
        "name",
        "age",
        "employee_id",
        "city"
      ],
      "hiring": [
        "employee_id",
        "start_from",
        "is_full_time",
        "shop_id"
      ],
      "shop": [
        "name",
        "location",
        "district",
        "number_products",
        "shop_id"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is the number of employees from each city?",
    "schema": {
      "employee": [
        "city",
        "employee_id",
        "name",
        "age"
      ],
      "shop": [
        "name",
        "location",
        "district",
        "number_products",
        "shop_id"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of employees for each city.",
    "schema": {
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which cities do more than one employee under age 30 come from?",
    "schema": {
      "employee": [
        "city",
        "age",
        "employee_id",
        "name"
      ],
      "hiring": [
        "employee_id",
        "start_from",
        "is_full_time",
        "shop_id"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the cities that have more than one employee under age 30.",
    "schema": {
      "employee": [
        "city",
        "age",
        "employee_id",
        "name"
      ],
      "hiring": [
        "employee_id",
        "start_from",
        "is_full_time",
        "shop_id"
      ],
      "shop": [
        "shop_id",
        "location",
        "district",
        "number_products"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the number of shops in each location.",
    "schema": {
      "shop": [
        "location",
        "shop_id",
        "name",
        "number_products"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "How many shops are there in each location?",
    "schema": {
      "shop": [
        "location",
        "shop_id",
        "name",
        "district"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "schema": {
      "shop": [
        "name",
        "district",
        "number_products",
        "shop_id"
      ],
      "employee": [
        "name",
        "employee_id",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "schema": {
      "shop": [
        "manager_name",
        "district",
        "name",
        "location",
        "shop_id"
      ],
      "employee": [
        "employee_id",
        "name"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "find the minimum and maximum number of products of all stores.",
    "schema": {
      "shop": [
        "number_products",
        "shop_id",
        "name",
        "location"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What are the minimum and maximum number of products across all the shops?",
    "schema": {
      "shop": [
        "number_products",
        "shop_id",
        "name",
        "location"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Return the name, location and district of all shops in descending order of number of products.",
    "schema": {
      "shop": [
        "number_products",
        "name",
        "location",
        "district",
        "shop_id"
      ],
      "employee": [
        "name",
        "employee_id",
        "age",
        "city"
      ],
      "hiring": [
        "start_from",
        "is_full_time",
        "employee_id",
        "shop_id"
      ],
      "evaluation": [
        "year_awarded",
        "bonus",
        "employee_id"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "schema": {
      "shop": [
        "name",
        "location",
        "district",
        "number_products",
        "shop_id"
      ],
      "employee": [
        "name",
        "age",
        "city",
        "employee_id"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the names of stores whose number products is more than the average number of products.",
    "schema": {
      "shop": [
        "number_products",
        "shop_id",
        "name",
        "location"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which shops' number products is above the average? Give me the shop names.",
    "schema": {
      "shop": [
        "number_products",
        "shop_id",
        "name",
        "location"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "find the name of employee who was awarded the most times in the evaluation.",
    "schema": {
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which employee received the most awards in evaluations? Give me the employee name.",
    "schema": {
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the name of the employee who got the highest one time bonus.",
    "schema": {
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which employee received the biggest bonus? Give me the employee name.",
    "schema": {
      "evaluation": [
        "employee_id",
        "bonus",
        "year_awarded"
      ],
      "employee": [
        "employee_id",
        "name"
      ],
      "shop": [
        "shop_id",
        "name"
      ],
      "hiring": [
        "employee_id",
        "shop_id",
        "start_from",
        "is_full_time"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        []
      ],
      "shop": [
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the names of employees who never won any award in the evaluation.",
    "schema": {
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What are the names of the employees who never received any evaluation?",
    "schema": {
      "employee": [
        "name",
        "employee_id",
        "age",
        "city"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is the name of the shop that is hiring the largest number of employees?",
    "schema": {
      "shop": [
        "name",
        "shop_id",
        "location",
        "district"
      ],
      "hiring": [
        "shop_id",
        "start_from",
        "is_full_time",
        "employee_id"
      ],
      "employee": [
        "name",
        "employee_id",
        "age",
        "city"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which shop has the most employees? Give me the shop name.",
    "schema": {
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "employee": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the name of the shops that do not hire any employee.",
    "schema": {
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which shops run with no employees? Find the shop names",
    "schema": {
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the number of employees hired in each shop; show the shop name as well.",
    "schema": {
      "shop": [
        "shop_id",
        "name",
        "number_products",
        "location"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "For each shop, return the number of employees working there and the name of the shop.",
    "schema": {
      "shop": [
        "shop_id",
        "name"
      ],
      "employee": [
        "employee_id"
      ],
      "hiring": [
        "shop_id",
        "employee_id"
      ],
      "evaluation": [
        "employee_id"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        []
      ],
      "employee": [
        []
      ],
      "hiring": [
        [],
        []
      ],
      "evaluation": [
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is total bonus given in all evaluations?",
    "schema": {
      "evaluation": [
        "bonus",
        "employee_id"
      ],
      "employee": [
        "employee_id",
        "name"
      ],
      "shop": [
        "shop_id",
        "name"
      ],
      "hiring": [
        "employee_id",
        "shop_id",
        "start_from",
        "is_full_time"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        []
      ],
      "employee": [
        [],
        []
      ],
      "shop": [
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the total amount of bonus given in all the evaluations.",
    "schema": {
      "evaluation": [
        "bonus",
        "employee_id",
        "year_awarded"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "employee_id",
        "shop_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Give me all the information about hiring.",
    "schema": {
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "What is all the information about hiring?",
    "schema": {
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "shop": [
        "shop_id",
        "name",
        "location",
        "district"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id"
    ],
    "db_contents": {
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "schema": {
      "shop": [
        "district",
        "number_products",
        "shop_id",
        "name"
      ],
      "evaluation": [
        "employee_id",
        "bonus",
        "year_awarded"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "schema": {
      "shop": [
        "district",
        "number_products",
        "shop_id",
        "name"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "How many different store locations are there?",
    "schema": {
      "shop": [
        "location",
        "shop_id",
        "name",
        "district"
      ],
      "employee": [
        "employee_id",
        "name",
        "age",
        "city"
      ],
      "hiring": [
        "shop_id",
        "employee_id",
        "start_from",
        "is_full_time"
      ],
      "evaluation": [
        "employee_id",
        "year_awarded",
        "bonus"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        [],
        [],
        []
      ],
      "employee": [
        [],
        [],
        [],
        []
      ],
      "hiring": [
        [],
        [],
        [],
        []
      ],
      "evaluation": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "employee_hire_evaluation",
    "question": "Count the number of distinct store locations.",
    "schema": {
      "shop": [
        "location",
        "shop_id"
      ],
      "employee": [
        "employee_id"
      ],
      "hiring": [
        "shop_id",
        "employee_id"
      ],
      "evaluation": [
        "employee_id"
      ]
    },
    "fk": [
      "hiring.employee_id = employee.employee_id",
      "hiring.shop_id = shop.shop_id",
      "evaluation.employee_id = employee.employee_id"
    ],
    "db_contents": {
      "shop": [
        [],
        []
      ],
      "employee": [
        []
      ],
      "hiring": [
        [],
        []
      ],
      "evaluation": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many documents do we have?",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of documents.",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "List document IDs, document names, and document descriptions for all documents.",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "templates": [
        "template_id",
        "template_type_code"
      ],
      "paragraphs": [
        "document_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        []
      ],
      "paragraphs": [
        []
      ],
      "ref_template_types": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids, names, and descriptions for all documents?",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document name and template id for document with description with the letter 'w' in it?",
    "schema": {
      "documents": [
        "document_name",
        "template_id",
        "document_description",
        "document_id"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_text",
        "paragraph_id",
        "other_details"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "schema": {
      "documents": [
        "document_description",
        "document_name",
        "template_id",
        "document_id"
      ],
      "templates": [
        "template_id",
        "template_type_code"
      ],
      "paragraphs": [
        "document_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        []
      ],
      "paragraphs": [
        []
      ],
      "ref_template_types": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [
          "Robbin CV"
        ],
        []
      ],
      "templates": [
        [],
        [],
        [
          "CV"
        ],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [
          "CV"
        ],
        [
          "CV"
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "schema": {
      "documents": [
        "document_name",
        "document_id",
        "template_id",
        "document_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "date_effective_from",
        "date_effective_to"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Robbin CV"
        ],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [
          "CV"
        ],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [
          "CV"
        ],
        [
          "CV"
        ]
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many different templates do all document use?",
    "schema": {
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of different templates used for documents.",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many documents are using the template with type code 'PPT'?",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ],
      "paragraphs": [
        "document_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [
          "PPT"
        ],
        []
      ],
      "documents": [
        [],
        []
      ],
      "ref_template_types": [
        [
          "PPT"
        ]
      ],
      "paragraphs": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of documents that use the PPT template type.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [
          "PPT"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [
          "PPT"
        ],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template ids and number of documents using each template.",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are all different template ids used for documents, and how many times were each of them used?",
    "schema": {
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the id and type code for the template used by the most documents?",
    "schema": {
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id and type code of the template that is used for the greatest number of documents.",
    "schema": {
      "templates": [
        "template_id",
        "template_type_code"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        []
      ],
      "ref_template_types": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show ids for all templates that are used by more than one document.",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the template ids of any templates used in more than a single document?",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show ids for all templates not used by any document.",
    "schema": {
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids for templates that are not used in any documents?",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates do we have?",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of templates.",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show template ids, version numbers, and template type codes for all templates.",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids, version numbers, and type codes for each template?",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all distinct template type codes for all templates.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes?",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of templates with template type code PP or PPT?",
    "schema": {
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [
          "PP",
          "PPT"
        ],
        [],
        []
      ],
      "ref_template_types": [
        [
          "PP",
          "PPT"
        ],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the ids of templates that have the code PP or PPT.",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [
          "PP",
          "PPT"
        ],
        []
      ],
      "ref_template_types": [
        [
          "PP",
          "PPT"
        ],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many templates have template type code CV?",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [
          "CV"
        ],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [
          "CV"
        ],
        [
          "CV"
        ]
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of templates of the type CV.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [
          "CV"
        ],
        [],
        []
      ],
      "ref_template_types": [
        [
          "CV"
        ],
        [
          "CV"
        ]
      ],
      "documents": [
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "schema": {
      "templates": [
        "version_number",
        "template_type_code",
        "template_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ],
      "documents": [
        "template_id",
        "document_name",
        "document_description",
        "document_id"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_text"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        []
      ],
      "ref_template_types": [
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "schema": {
      "templates": [
        "version_number",
        "template_type_code",
        "template_id",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and number of templates for each.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "schema": {
      "ref_template_types": [
        "template_type_code"
      ],
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        []
      ],
      "templates": [
        [],
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Which template type code has most number of templates?",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        []
      ],
      "ref_template_types": [
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the type code of the template type that the most templates belong to.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes with less than three templates.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that have fewer than 3 templates?",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What the smallest version number and its template type code?",
    "schema": {
      "templates": [
        "version_number",
        "template_type_code",
        "template_id",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "schema": {
      "templates": [
        "version_number",
        "template_type_code",
        "template_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        []
      ],
      "ref_template_types": [
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type code of the template used by document with the name \"Data base\"?",
    "schema": {
      "documents": [
        "document_name",
        "template_id",
        "document_id"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Data base"
        ],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the template type code of the template that is used by a document named Data base.",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [
          "Data base"
        ],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document names using templates with template type code BK.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "document_name",
        "template_id",
        "document_id",
        "document_description"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "paragraph_text",
        "document_id",
        "paragraph_id",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [
          "BK"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [
          "BK"
        ],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the names of documents that use templates with the code BK?",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "document_name",
        "template_id",
        "document_id",
        "document_description"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id"
    ],
    "db_contents": {
      "templates": [
        [
          "BK"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [
          "BK"
        ],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and the number of documents using each type.",
    "schema": {
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the different template type codes, and how many documents use each type?",
    "schema": {
      "ref_template_types": [
        "template_type_code"
      ],
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        []
      ],
      "templates": [
        [],
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Which template type code is used by most number of documents?",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the code of the template type that is most commonly used in documents.",
    "schema": {
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes that are not used by any document.",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the codes of template types that are not used for any document?",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all template type codes and descriptions.",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        []
      ],
      "templates": [
        [],
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the type codes and descriptions for all template types?",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type descriptions for template type code \"AD\".",
    "schema": {
      "ref_template_types": [
        "template_type_description",
        "template_type_code"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        [
          "AD"
        ]
      ],
      "templates": [
        [
          "AD"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the template type description of the template type with the code AD.",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "documents": [
        "template_id",
        "document_id"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [
          "AD"
        ],
        []
      ],
      "templates": [
        [
          "AD"
        ],
        []
      ],
      "documents": [
        [],
        []
      ],
      "paragraphs": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the template type code for template type description \"Book\".",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        [
          "Book"
        ]
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the type code of the template type with the description \"Book\".",
    "schema": {
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [],
        [
          "Book"
        ]
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the distinct template type descriptions for the templates ever used by any document?",
    "schema": {
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the different descriptions for templates that have been used in a document.",
    "schema": {
      "templates": [
        "template_id",
        "template_type_code",
        "date_effective_from",
        "date_effective_to"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ]
    },
    "fk": [
      "documents.template_id = templates.template_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the template ids with template type description \"Presentation\".",
    "schema": {
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        [
          "Presentation"
        ]
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the ids corresponding to templates with the description 'Presentation'.",
    "schema": {
      "ref_template_types": [
        "template_type_description",
        "template_type_code"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "ref_template_types": [
        [
          "Presentation"
        ],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many paragraphs in total?",
    "schema": {
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of paragraphs.",
    "schema": {
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ],
      "documents": [
        "template_id",
        "document_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_type_code",
        "template_id",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_description",
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "How many paragraphs for the document with name 'Summer Show'?",
    "schema": {
      "documents": [
        "document_name",
        "document_id"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Summer Show"
        ],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Count the number of paragraphs in the document named 'Summer Show'.",
    "schema": {
      "documents": [
        "document_name",
        "document_id",
        "template_id",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Summer Show"
        ],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show paragraph details for paragraph with text 'Korea ' .",
    "schema": {
      "paragraphs": [
        "paragraph_text",
        "paragraph_id",
        "document_id",
        "other_details"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [
          "Korea"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "schema": {
      "paragraphs": [
        "paragraph_text",
        "paragraph_id",
        "document_id",
        "other_details"
      ],
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [
          "Korea"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "schema": {
      "documents": [
        "document_name",
        "document_id",
        "template_id",
        "document_description"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Welcome to NY"
        ],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "template_id",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [
          "Welcome to NY"
        ],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all paragraph texts for the document \"Customer reviews\".",
    "schema": {
      "documents": [
        "document_name",
        "document_id",
        "template_id",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_text",
        "paragraph_id",
        "document_id",
        "other_details"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Customer reviews"
        ],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
    "schema": {
      "documents": [
        "document_name",
        "document_id",
        "template_id",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_text",
        "paragraph_id",
        "document_id"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [
          "Customer reviews"
        ],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show all document ids, names and the number of paragraphs in each document.",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "paragraphs": [
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
    "schema": {
      "documents": [
        "document_id",
        "document_name",
        "document_description",
        "template_id"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "List all document ids with at least two paragraphs.",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ]
    },
    "fk": [
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id and name with greatest number of paragraphs?",
    "schema": {
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ],
      "documents": [
        "document_id",
        "document_name",
        "template_id",
        "document_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id and name of the document with the most paragraphs.",
    "schema": {
      "paragraphs": [
        "document_id"
      ],
      "documents": [
        "document_id",
        "document_name",
        "template_id"
      ],
      "templates": [
        "template_id",
        "template_type_code"
      ],
      "ref_template_types": [
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        []
      ],
      "documents": [
        [],
        [],
        []
      ],
      "templates": [
        [],
        []
      ],
      "ref_template_types": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id with least number of paragraphs?",
    "schema": {
      "paragraphs": [
        "document_id",
        "paragraph_id",
        "paragraph_text",
        "other_details"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Return the id of the document with the fewest paragraphs.",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What is the document id with 1 to 2 paragraphs?",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "paragraph_id",
        "document_id",
        "paragraph_text",
        "other_details"
      ],
      "templates": [
        "template_id",
        "version_number",
        "template_type_code",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Give the ids of documents that have between one and two paragraphs.",
    "schema": {
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "paragraphs": [
        "document_id"
      ],
      "templates": [
        "template_type_code",
        "template_id"
      ],
      "ref_template_types": [
        "template_type_code"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "documents": [
        [],
        [],
        [],
        []
      ],
      "paragraphs": [
        []
      ],
      "templates": [
        [],
        []
      ],
      "ref_template_types": [
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "schema": {
      "paragraphs": [
        "paragraph_text",
        "document_id",
        "paragraph_id",
        "other_details"
      ],
      "documents": [
        "document_id",
        "template_id",
        "document_name",
        "document_description"
      ],
      "templates": [
        "template_id",
        "template_type_code",
        "version_number",
        "date_effective_from"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [
          "Brazil",
          "Ireland"
        ],
        [],
        [],
        []
      ],
      "documents": [
        [],
        [],
        [],
        []
      ],
      "templates": [
        [],
        [],
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "schema": {
      "paragraphs": [
        "paragraph_text",
        "document_id",
        "paragraph_id"
      ],
      "documents": [
        "document_id",
        "document_name",
        "template_id"
      ],
      "templates": [
        "template_id",
        "template_type_code"
      ],
      "ref_template_types": [
        "template_type_code",
        "template_type_description"
      ]
    },
    "fk": [
      "templates.template_type_code = ref_template_types.template_type_code",
      "documents.template_id = templates.template_id",
      "paragraphs.document_id = documents.document_id"
    ],
    "db_contents": {
      "paragraphs": [
        [
          "Brazil",
          "Ireland"
        ],
        [],
        []
      ],
      "documents": [
        [],
        [],
        []
      ],
      "templates": [
        [],
        []
      ],
      "ref_template_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "How many teachers are there?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What is the total count of teachers?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "List the names of teachers in ascending order of age.",
    "schema": {
      "teacher": [
        "age",
        "name",
        "teacher_id",
        "hometown"
      ]
    },
    "fk": [],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers ordered by ascending age?",
    "schema": {
      "teacher": [
        "age",
        "name",
        "teacher_id",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the age and hometown of teachers?",
    "schema": {
      "teacher": [
        "age",
        "hometown",
        "teacher_id",
        "name"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What is the age and hometown of every teacher?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id"
      ],
      "course": [
        "course_id"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        []
      ],
      "course": [
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        [
          "Little Lever Urban District"
        ]
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        [
          "Little Lever Urban District"
        ]
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show the name of teachers aged either 32 or 33?",
    "schema": {
      "teacher": [
        "name",
        "age",
        "teacher_id",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "staring_date",
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers who are aged either 32 or 33?",
    "schema": {
      "teacher": [
        "name",
        "age",
        "teacher_id",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What is the hometown of the youngest teacher?",
    "schema": {
      "teacher": [
        "age",
        "hometown",
        "teacher_id"
      ],
      "course": [
        "course_id"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        []
      ],
      "course": [
        []
      ],
      "course_arrange": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Where is the youngest teacher from?",
    "schema": {
      "teacher": [
        "age",
        "teacher_id",
        "name",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show different hometown of teachers and the number of teachers from each hometown.",
    "schema": {
      "teacher": [
        "hometown",
        "teacher_id",
        "name",
        "age"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "For each hometown, how many teachers are there?",
    "schema": {
      "teacher": [
        "hometown",
        "teacher_id",
        "name",
        "age"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "List the most common hometown of teachers.",
    "schema": {
      "teacher": [
        "hometown",
        "teacher_id",
        "name",
        "age"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What is the most commmon hometowns for teachers?",
    "schema": {
      "teacher": [
        "hometown",
        "teacher_id",
        "name",
        "age"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show the hometowns shared by at least two teachers.",
    "schema": {
      "teacher": [
        "hometown",
        "teacher_id",
        "name",
        "age"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the towns from which at least two teachers come from?",
    "schema": {
      "teacher": [
        "hometown",
        "teacher_id",
        "name",
        "age"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers and the courses they are arranged to teach.",
    "schema": {
      "teacher": [
        "teacher_id",
        "name"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        []
      ],
      "course_arrange": [
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What is the name of each teacher and what course they teach?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course": [
        "course_id",
        "course"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course": [
        "course_id",
        "course"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course": [
        "course_id",
        "course"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show the name of the teacher for the math course.",
    "schema": {
      "course": [
        "course_id",
        "course"
      ],
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "course": [
        [],
        [
          "Math"
        ]
      ],
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the people who teach math courses?",
    "schema": {
      "course": [
        "course_id",
        "course"
      ],
      "teacher": [
        "name",
        "teacher_id",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "course": [
        [],
        [
          "Math"
        ]
      ],
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers and the number of courses they teach.",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course": [
        "course_id",
        "course"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers and how many courses do they teach?",
    "schema": {
      "teacher": [
        "name",
        "teacher_id",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "Show names of teachers that teach at least two courses.",
    "schema": {
      "teacher": [
        "name",
        "teacher_id",
        "age",
        "hometown"
      ],
      "course": [
        "course_id",
        "course"
      ],
      "course_arrange": [
        "teacher_id",
        "course_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers who teach at least two courses?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "List the names of teachers who have not been arranged to teach courses.",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ],
      "course": [
        "course_id",
        "course"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "course_teach",
    "question": "What are the names of the teachers whose courses have not been arranged?",
    "schema": {
      "teacher": [
        "teacher_id",
        "name",
        "age",
        "hometown"
      ],
      "course": [
        "course_id",
        "course"
      ],
      "course_arrange": [
        "course_id",
        "teacher_id",
        "grade"
      ]
    },
    "fk": [
      "course_arrange.teacher_id = teacher.teacher_id",
      "course_arrange.course_id = course.course_id"
    ],
    "db_contents": {
      "teacher": [
        [],
        [],
        [],
        []
      ],
      "course": [
        [],
        []
      ],
      "course_arrange": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "How many visitors below age 30 are there?",
    "schema": {
      "visitor": [
        "age",
        "id",
        "name",
        "level_of_membership"
      ],
      "visit": [
        "visitor_id",
        "museum_id",
        "num_of_ticket",
        "total_spent"
      ],
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "museum": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "schema": {
      "visitor": [
        "level_of_membership",
        "name",
        "id"
      ],
      "visit": [
        "visitor_id",
        "num_of_ticket",
        "total_spent",
        "museum_id"
      ],
      "museum": [
        "name",
        "museum_id"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visitor": [
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "museum": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "schema": {
      "visitor": [
        "level_of_membership",
        "age",
        "id",
        "name"
      ],
      "visit": [
        "visitor_id",
        "museum_id",
        "num_of_ticket",
        "total_spent"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id"
    ],
    "db_contents": {
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "schema": {
      "visitor": [
        "level_of_membership",
        "name",
        "age",
        "id"
      ],
      "visit": [
        "visitor_id",
        "num_of_ticket",
        "total_spent",
        "museum_id"
      ],
      "museum": [
        "name",
        "open_year",
        "num_of_staff",
        "museum_id"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "museum": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "Find the id and name of the museum that has the most staff members?",
    "schema": {
      "museum": [
        "num_of_staff",
        "museum_id",
        "name",
        "open_year"
      ],
      "visitor": [
        "id",
        "name",
        "level_of_membership",
        "age"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "Find the average number of staff working for the museums that were open before 2009.",
    "schema": {
      "museum": [
        "open_year",
        "museum_id",
        "name",
        "num_of_staff"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "id",
        "level_of_membership",
        "age",
        "name"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "schema": {
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ],
      "visitor": [
        "id",
        "name",
        "level_of_membership",
        "age"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [
          "Plaza Museum"
        ],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "schema": {
      "museum": [
        "num_of_staff",
        "name",
        "open_year",
        "museum_id"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "name",
        "level_of_membership",
        "age",
        "id"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "find the id, name and age for visitors who visited some museums more than once.",
    "schema": {
      "visit": [
        "visitor_id",
        "museum_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "id",
        "name",
        "age",
        "level_of_membership"
      ],
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "museum": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
    "schema": {
      "visitor": [
        "id",
        "name",
        "level_of_membership",
        "age"
      ],
      "visit": [
        "visitor_id",
        "total_spent",
        "museum_id"
      ],
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        []
      ],
      "museum": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What are the id and name of the museum visited most times?",
    "schema": {
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "id",
        "name",
        "level_of_membership",
        "age"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What is the name of the museum that had no visitor yet?",
    "schema": {
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "id",
        "name",
        "level_of_membership",
        "age"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "Find the name and age of the visitor who bought the most tickets at once.",
    "schema": {
      "visit": [
        "num_of_ticket",
        "visitor_id",
        "museum_id",
        "total_spent"
      ],
      "visitor": [
        "name",
        "age",
        "id",
        "level_of_membership"
      ],
      "museum": [
        "name",
        "museum_id",
        "num_of_staff",
        "open_year"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "museum": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "schema": {
      "visit": [
        "num_of_ticket",
        "total_spent",
        "visitor_id",
        "museum_id"
      ],
      "museum": [
        "museum_id"
      ],
      "visitor": [
        "id"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visit": [
        [],
        [],
        [],
        []
      ],
      "museum": [
        []
      ],
      "visitor": [
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What is the total ticket expense of the visitors whose membership level is 1?",
    "schema": {
      "visit": [
        "visitor_id",
        "num_of_ticket",
        "total_spent",
        "museum_id"
      ],
      "visitor": [
        "level_of_membership",
        "id"
      ],
      "museum": [
        "museum_id"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        []
      ],
      "museum": [
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
    "schema": {
      "museum": [
        "name",
        "open_year",
        "museum_id"
      ],
      "visitor": [
        "name",
        "id",
        "level_of_membership",
        "age"
      ],
      "visit": [
        "visitor_id",
        "museum_id",
        "num_of_ticket",
        "total_spent"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "Find the number of visitors who did not visit any museum opened after 2010.",
    "schema": {
      "museum": [
        "museum_id",
        "name",
        "num_of_staff",
        "open_year"
      ],
      "visit": [
        "visitor_id",
        "museum_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "id",
        "name",
        "level_of_membership",
        "age"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "museum_visit",
    "question": "How many museums were opened after 2013 or before 2008?",
    "schema": {
      "museum": [
        "open_year",
        "museum_id",
        "name",
        "num_of_staff"
      ],
      "visit": [
        "museum_id",
        "visitor_id",
        "num_of_ticket",
        "total_spent"
      ],
      "visitor": [
        "level_of_membership",
        "id",
        "name",
        "age"
      ]
    },
    "fk": [
      "visit.visitor_id = visitor.id",
      "visit.museum_id = museum.museum_id"
    ],
    "db_contents": {
      "museum": [
        [],
        [],
        [],
        []
      ],
      "visit": [
        [],
        [],
        [],
        []
      ],
      "visitor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the total number of players.",
    "schema": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many players are there?",
    "schema": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the total number of matches.",
    "schema": {
      "matches": [
        "match_num",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        []
      ],
      "players": [
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Count the number of matches.",
    "schema": {
      "matches": [
        "match_num",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        []
      ],
      "players": [
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "List the first name and birth date of all players from the country with code USA.",
    "schema": {
      "players": [
        "country_code",
        "first_name",
        "birth_date",
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [
          "USA"
        ],
        [],
        [],
        []
      ],
      "matches": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names and birth dates of players from the USA?",
    "schema": {
      "players": [
        "first_name",
        "birth_date",
        "player_id",
        "last_name"
      ],
      "matches": [
        "winner_id",
        "loser_id",
        "winner_name"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the average age of losers and winners of all matches.",
    "schema": {
      "matches": [
        "loser_age",
        "winner_age",
        "loser_id",
        "winner_id"
      ],
      "players": [
        "player_id",
        "birth_date"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the average ages of losers and winners across matches?",
    "schema": {
      "matches": [
        "loser_age",
        "winner_age",
        "loser_name",
        "winner_name",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "birth_date",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the average rank of winners in all matches.",
    "schema": {
      "matches": [
        "winner_rank",
        "winner_id",
        "match_num",
        "tourney_date",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the average rank for winners in all matches?",
    "schema": {
      "matches": [
        "winner_rank",
        "winner_rank_points",
        "winner_id",
        "tourney_date",
        "loser_id"
      ],
      "rankings": [
        "ranking",
        "ranking_points",
        "player_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the highest rank of losers in all matches.",
    "schema": {
      "matches": [
        "loser_rank",
        "loser_name",
        "loser_id",
        "best_of",
        "winner_id"
      ],
      "players": [
        "player_id",
        "last_name",
        "first_name",
        "hand"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the best rank of losers across all matches?",
    "schema": {
      "matches": [
        "loser_rank",
        "loser_id",
        "loser_name",
        "loser_rank_points",
        "winner_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "find the number of distinct country codes of all players.",
    "schema": {
      "players": [
        "country_code",
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        []
      ],
      "matches": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many distinct countries do players come from?",
    "schema": {
      "players": [
        "country_code",
        "player_id"
      ],
      "matches": [
        "winner_ioc",
        "loser_ioc",
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of distinct name of losers.",
    "schema": {
      "matches": [
        "loser_name",
        "loser_id",
        "winner_id"
      ],
      "players": [
        "player_id",
        "first_name"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        []
      ],
      "players": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many different loser names are there?",
    "schema": {
      "matches": [
        "loser_name",
        "loser_id",
        "winner_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the name of tourney that has more than 10 matches.",
    "schema": {
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ],
      "matches": [
        "tourney_name",
        "match_num",
        "tourney_id",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the names of tournaments that have more than 10 matches?",
    "schema": {
      "matches": [
        "match_num",
        "tourney_name",
        "year"
      ]
    },
    "fk": [],
    "db_contents": {
      "matches": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "schema": {
      "matches": [
        "winner_name",
        "winner_id",
        "tourney_date",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the names of players who won in both 2013 and 2016?",
    "schema": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "matches": [
        "winner_id",
        "year",
        "winner_name",
        "winner_age",
        "loser_id"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "schema": {
      "matches": [
        "year",
        "match_num",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "birth_date",
        "country_code"
      ],
      "rankings": [
        "ranking_date",
        "player_id",
        "ranking"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many matches were played in 2013 or 2016?",
    "schema": {
      "matches": [
        "year",
        "match_num"
      ]
    },
    "fk": [],
    "db_contents": {
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "schema": {
      "matches": [
        "tourney_name",
        "winner_id",
        "winner_name",
        "winner_ioc",
        "loser_id"
      ],
      "players": [
        "player_id",
        "country_code",
        "first_name"
      ],
      "rankings": [
        "player_id",
        "ranking"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [
          "Australian Open",
          "WTA Championships"
        ],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "schema": {
      "matches": [
        "winner_name",
        "winner_ioc",
        "tourney_name",
        "tourney_id",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "country_code"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [
          "Australian Open",
          "WTA Championships"
        ],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the first name and country code of the oldest player.",
    "schema": {
      "players": [
        "birth_date",
        "first_name",
        "country_code",
        "player_id"
      ],
      "matches": [
        "loser_id",
        "winner_id",
        "loser_age"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the first name and country code of the oldest player?",
    "schema": {
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ],
      "players": [
        "player_id",
        "first_name",
        "country_code",
        "last_name"
      ],
      "matches": [
        "winner_id",
        "loser_id",
        "winner_name"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "List the first and last name of all players in the order of birth date.",
    "schema": {
      "players": [
        "birth_date",
        "first_name",
        "last_name",
        "player_id"
      ],
      "matches": [
        "winner_name",
        "loser_name",
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [
          "Date",
          "Last"
        ],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the full names of all players, sorted by birth date?",
    "schema": {
      "players": [
        "birth_date",
        "first_name",
        "last_name",
        "player_id"
      ],
      "matches": [
        "winner_name",
        "loser_name",
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [
          "Date"
        ],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "schema": {
      "players": [
        "first_name",
        "last_name",
        "hand",
        "birth_date",
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id",
        "winner_hand",
        "loser_hand"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [
          "Date",
          "Last"
        ],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the full names of all left handed players, in order of birth date?",
    "schema": {
      "players": [
        "last_name",
        "hand",
        "birth_date",
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [
          "Date"
        ],
        [],
        [],
        []
      ],
      "matches": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the first name and country code of the player who did the most number of tours.",
    "schema": {
      "rankings": [
        "tours",
        "ranking_date",
        "ranking",
        "player_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "country_code",
        "last_name"
      ],
      "matches": [
        "winner_id",
        "loser_id",
        "tourney_id",
        "tourney_name"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the first name and country code of the player with the most tours?",
    "schema": {
      "rankings": [
        "tours",
        "player_id",
        "ranking_date",
        "ranking"
      ],
      "players": [
        "first_name",
        "country_code",
        "player_id",
        "last_name"
      ]
    },
    "fk": [
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the year that has the most number of matches.",
    "schema": {
      "matches": [
        "year",
        "match_num",
        "best_of",
        "tourney_date"
      ]
    },
    "fk": [],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Which year had the most matches?",
    "schema": {
      "matches": [
        "year",
        "match_num",
        "tourney_date",
        "tourney_id",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the name and rank points of the winner who won the most times.",
    "schema": {
      "matches": [
        "winner_name",
        "winner_rank_points",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "schema": {
      "matches": [
        "winner_name",
        "winner_rank_points",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "schema": {
      "matches": [
        "tourney_name",
        "winner_rank_points",
        "winner_name",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "rankings": [
        "player_id",
        "ranking_points",
        "ranking_date",
        "ranking"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [
          "Australian Open"
        ],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "schema": {
      "matches": [
        "winner_name",
        "winner_rank_points",
        "tourney_name",
        "tourney_id",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "rankings": [
        "player_id",
        "ranking_points",
        "ranking_date"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [
          "Australian Open"
        ],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "schema": {
      "matches": [
        "minutes",
        "winner_name",
        "loser_name",
        "match_num",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the names of the winner and loser who played in the longest match?",
    "schema": {
      "matches": [
        "minutes",
        "winner_name",
        "loser_name",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the average ranking for each player and their first name.",
    "schema": {
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names of all players, and their average rankings?",
    "schema": {
      "players": [
        "first_name",
        "player_id"
      ],
      "rankings": [
        "player_id",
        "ranking",
        "ranking_date",
        "ranking_points"
      ]
    },
    "fk": [
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the total ranking points for each player and their first name.",
    "schema": {
      "rankings": [
        "ranking_points",
        "player_id"
      ],
      "players": [
        "player_id",
        "first_name"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        []
      ],
      "players": [
        [],
        []
      ],
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the first names of all players, and their total ranking points?",
    "schema": {
      "players": [
        "first_name",
        "player_id"
      ],
      "rankings": [
        "player_id",
        "ranking_points",
        "ranking_date"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ],
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "find the number of players for each country.",
    "schema": {
      "players": [
        "country_code",
        "player_id",
        "first_name",
        "last_name"
      ]
    },
    "fk": [],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many players are from each country?",
    "schema": {
      "players": [
        "country_code",
        "player_id",
        "first_name",
        "last_name"
      ]
    },
    "fk": [],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "find the code of the country where has the greatest number of players.",
    "schema": {
      "players": [
        "country_code",
        "player_id",
        "first_name",
        "last_name"
      ],
      "matches": [
        "winner_id",
        "loser_id",
        "tourney_id",
        "best_of"
      ],
      "rankings": [
        "ranking_date",
        "ranking",
        "player_id",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the code of the country with the most players?",
    "schema": {
      "players": [
        "country_code",
        "player_id",
        "first_name",
        "last_name"
      ],
      "matches": [
        "winner_id",
        "best_of",
        "draw_size",
        "loser_age",
        "loser_id"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the codes of countries that have more than 50 players.",
    "schema": {
      "players": [
        "country_code",
        "player_id"
      ],
      "rankings": [
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        []
      ],
      "rankings": [
        []
      ],
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the codes of countries with more than 50 players?",
    "schema": {
      "players": [
        "country_code",
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        []
      ],
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the total number of tours for each ranking date.",
    "schema": {
      "rankings": [
        "ranking_date",
        "tours",
        "player_id"
      ],
      "players": [
        "player_id"
      ],
      "matches": [
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        []
      ],
      "players": [
        []
      ],
      "matches": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many total tours were there for each ranking date?",
    "schema": {
      "rankings": [
        "ranking_date",
        "tours",
        "player_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "matches": [
        "best_of",
        "draw_size",
        "loser_age",
        "loser_entry",
        "winner_id",
        "loser_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [
          "Date"
        ],
        []
      ],
      "matches": [
        [],
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of matches happened in each year.",
    "schema": {
      "matches": [
        "year",
        "match_num",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many matches were played in each year?",
    "schema": {
      "matches": [
        "year",
        "match_num",
        "tourney_date"
      ]
    },
    "fk": [],
    "db_contents": {
      "matches": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "schema": {
      "matches": [
        "winner_name",
        "winner_rank",
        "winner_age",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "last_name"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "schema": {
      "matches": [
        "winner_age",
        "winner_name",
        "winner_rank",
        "winner_id",
        "loser_id"
      ],
      "players": [
        "birth_date",
        "first_name",
        "last_name",
        "player_id"
      ],
      "rankings": [
        "ranking",
        "ranking_points",
        "ranking_date",
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "schema": {
      "matches": [
        "winner_id",
        "winner_hand",
        "tourney_name",
        "loser_id"
      ],
      "players": [
        "player_id",
        "hand"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [
          "WTA Championships"
        ],
        []
      ],
      "players": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "schema": {
      "matches": [
        "winner_hand",
        "winner_id",
        "tourney_name",
        "loser_id"
      ],
      "players": [
        "player_id",
        "hand"
      ],
      "rankings": [
        "player_id"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "matches": [
        [],
        [],
        [
          "WTA Championships"
        ],
        []
      ],
      "players": [
        [],
        []
      ],
      "rankings": [
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
    "schema": {
      "rankings": [
        "player_id",
        "ranking_points",
        "ranking_date",
        "ranking"
      ],
      "matches": [
        "winner_id",
        "winner_rank_points",
        "winner_name",
        "winner_ioc",
        "loser_id"
      ],
      "players": [
        "player_id",
        "first_name",
        "country_code",
        "birth_date"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "rankings": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        [],
        []
      ],
      "players": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
    "schema": {
      "players": [
        "player_id",
        "first_name",
        "country_code",
        "birth_date"
      ],
      "matches": [
        "winner_id",
        "winner_rank_points",
        "loser_id"
      ],
      "rankings": [
        "player_id",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        []
      ],
      "rankings": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "Find the number of players for each hand type.",
    "schema": {
      "players": [
        "player_id",
        "first_name",
        "last_name",
        "hand"
      ],
      "matches": [
        "winner_id",
        "loser_id",
        "winner_hand",
        "loser_hand"
      ],
      "rankings": [
        "player_id",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "wta_1",
    "question": "How many players are there for each hand type?",
    "schema": {
      "players": [
        "hand",
        "player_id",
        "first_name",
        "last_name"
      ],
      "matches": [
        "winner_hand",
        "loser_hand",
        "winner_id",
        "loser_id"
      ],
      "rankings": [
        "player_id",
        "ranking_date",
        "ranking",
        "ranking_points"
      ]
    },
    "fk": [
      "matches.winner_id = players.player_id",
      "matches.loser_id = players.player_id",
      "rankings.player_id = players.player_id"
    ],
    "db_contents": {
      "players": [
        [],
        [],
        [],
        []
      ],
      "matches": [
        [],
        [],
        [],
        []
      ],
      "rankings": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "How many ships ended up being 'Captured'?",
    "schema": {
      "ship": [
        "disposition_of_ship",
        "id",
        "lost_in_battle",
        "name"
      ],
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "ship": [
        [
          "Captured"
        ],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
    "schema": {
      "ship": [
        "name",
        "tonnage",
        "id",
        "lost_in_battle"
      ]
    },
    "fk": [],
    "db_contents": {
      "ship": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "List the name, date and result of each battle.",
    "schema": {
      "battle": [
        "name",
        "date",
        "result",
        "bulgarian_commander",
        "id"
      ],
      "ship": [
        "id",
        "lost_in_battle",
        "name",
        "tonnage"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "battle": [
        [],
        [],
        [],
        [],
        []
      ],
      "ship": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What is maximum and minimum death toll caused each time?",
    "schema": {
      "death": [
        "killed",
        "caused_by_ship_id",
        "injured",
        "id"
      ],
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "death": [
        [],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ],
      "ship": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What is the average number of injuries caused each time?",
    "schema": {
      "death": [
        "injured",
        "caused_by_ship_id",
        "id",
        "note"
      ],
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander"
      ],
      "ship": [
        "lost_in_battle",
        "id",
        "name",
        "tonnage"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "death": [
        [],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ],
      "ship": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
    "schema": {
      "ship": [
        "tonnage",
        "id",
        "name",
        "ship_type"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "ship": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "schema": {
      "battle": [
        "name",
        "result",
        "bulgarian_commander",
        "date",
        "id"
      ],
      "ship": [
        "lost_in_battle",
        "name",
        "id",
        "tonnage"
      ],
      "death": [
        "caused_by_ship_id",
        "note",
        "id",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "battle": [
        [],
        [],
        [
          "Boril"
        ],
        [],
        []
      ],
      "ship": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
    "schema": {
      "ship": [
        "id",
        "name",
        "ship_type",
        "lost_in_battle"
      ],
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander"
      ],
      "death": [
        "id",
        "caused_by_ship_id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "ship": [
        [],
        [],
        [
          "Brig"
        ],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
    "schema": {
      "death": [
        "killed",
        "id",
        "caused_by_ship_id",
        "note"
      ],
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander"
      ]
    },
    "fk": [],
    "db_contents": {
      "death": [
        [],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What is the ship id and name that caused most total injuries?",
    "schema": {
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ],
      "ship": [
        "id",
        "name",
        "lost_in_battle",
        "tonnage"
      ]
    },
    "fk": [
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "death": [
        [],
        [],
        [],
        []
      ],
      "ship": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "schema": {
      "battle": [
        "name",
        "bulgarian_commander",
        "latin_commander",
        "id"
      ]
    },
    "fk": [],
    "db_contents": {
      "battle": [
        [],
        [
          "Kaloyan"
        ],
        [
          "Baldwin I"
        ],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "How many different results are there for the battles?",
    "schema": {
      "battle": [
        "result",
        "id",
        "name",
        "date"
      ],
      "ship": [
        "id",
        "name",
        "lost_in_battle",
        "tonnage"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "battle": [
        [],
        [],
        [],
        []
      ],
      "ship": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "How many battles did not lose any ship with tonnage '225'?",
    "schema": {
      "ship": [
        "tonnage",
        "lost_in_battle",
        "id",
        "name"
      ],
      "battle": [
        "id",
        "name",
        "date",
        "bulgarian_commander"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "ship": [
        [],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
    "schema": {
      "ship": [
        "name",
        "lost_in_battle",
        "id",
        "tonnage"
      ],
      "battle": [
        "name",
        "date",
        "id",
        "bulgarian_commander"
      ],
      "death": [
        "caused_by_ship_id",
        "id",
        "note",
        "killed"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "ship": [
        [
          "HMS Atalanta",
          "Lettice"
        ],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
    "schema": {
      "ship": [
        "lost_in_battle",
        "name",
        "ship_type",
        "tonnage",
        "id"
      ],
      "battle": [
        "name",
        "result",
        "bulgarian_commander",
        "date",
        "id"
      ],
      "death": [
        "caused_by_ship_id",
        "note",
        "killed",
        "injured"
      ]
    },
    "fk": [
      "ship.lost_in_battle = battle.id",
      "death.caused_by_ship_id = ship.id"
    ],
    "db_contents": {
      "ship": [
        [],
        [],
        [],
        [],
        []
      ],
      "battle": [
        [],
        [],
        [],
        [],
        []
      ],
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "battle_death",
    "question": "What are the notes of the death events which has substring 'East'?",
    "schema": {
      "death": [
        "note",
        "caused_by_ship_id",
        "id",
        "killed"
      ]
    },
    "fk": [],
    "db_contents": {
      "death": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "what are all the addresses including line 1 and line 2?",
    "schema": {
      "addresses": [
        "line_1",
        "line_2",
        "address_id",
        "line_3"
      ],
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "current_address_id",
        "permanent_address_id",
        "student_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first and second line for all addresses?",
    "schema": {
      "addresses": [
        "line_1",
        "line_2",
        "line_3",
        "city",
        "address_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "addresses": [
        [],
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many courses in total are listed?",
    "schema": {
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [],
    "db_contents": {
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many courses are there?",
    "schema": {
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "sections": [
        "section_id",
        "course_id",
        "section_name",
        "section_description"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "sections": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How is the math course described?",
    "schema": {
      "courses": [
        "course_name",
        "course_description",
        "other_details",
        "course_id"
      ],
      "sections": [
        "section_name",
        "section_description",
        "other_details",
        "course_id"
      ],
      "degree_programs": [
        "degree_summary_description",
        "other_details",
        "department_id"
      ],
      "departments": [
        "department_name",
        "department_description",
        "other_details",
        "department_id"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id",
      "sections.course_id = courses.course_id"
    ],
    "db_contents": {
      "courses": [
        [
          "math"
        ],
        [],
        [],
        []
      ],
      "sections": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        []
      ],
      "departments": [
        [
          "math"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the descriptions for all the math courses?",
    "schema": {
      "courses": [
        "course_name",
        "course_description",
        "other_details",
        "course_id"
      ],
      "degree_programs": [
        "degree_summary_name",
        "degree_summary_description",
        "department_id",
        "other_details"
      ],
      "sections": [
        "section_name",
        "section_description",
        "other_details",
        "course_id"
      ],
      "student_enrolment_courses": [
        "course_id"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "courses": [
        [
          "math"
        ],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "sections": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "schema": {
      "addresses": [
        "zip_postcode",
        "city",
        "address_id",
        "line_1"
      ],
      "students": [
        "current_address_id",
        "permanent_address_id",
        "student_id",
        "first_name"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "addresses": [
        [],
        [
          "Port Chelsea"
        ],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the zip code for Port Chelsea?",
    "schema": {
      "addresses": [
        "zip_postcode",
        "city"
      ]
    },
    "fk": [],
    "db_contents": {
      "addresses": [
        [],
        [
          "Port Chelsea"
        ]
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which department offers the most number of degrees? List department name and id.",
    "schema": {
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "degree_programs": [
        "department_id",
        "degree_program_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name and id of the department with the most number of degrees ?",
    "schema": {
      "degree_programs": [
        "department_id",
        "degree_program_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "departments": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many departments offer any degree?",
    "schema": {
      "departments": [
        "department_name",
        "department_id",
        "department_description",
        "other_details"
      ],
      "degree_programs": [
        "degree_summary_name",
        "degree_program_id",
        "department_id",
        "degree_summary_description"
      ],
      "courses": [
        "course_name",
        "course_id",
        "course_description",
        "other_details"
      ],
      "student_enrolment": [
        "degree_program_id",
        "student_enrolment_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different departments offer degrees?",
    "schema": {
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different degree names are offered?",
    "schema": {
      "degree_programs": [
        "degree_summary_name",
        "degree_program_id",
        "department_id",
        "degree_summary_description"
      ],
      "courses": [
        "course_id"
      ],
      "student_enrolment": [
        "degree_program_id",
        "student_enrolment_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id"
      ]
    },
    "fk": [
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        []
      ],
      "student_enrolment": [
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different degrees are offered?",
    "schema": {
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "departments": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many degrees does the engineering department offer?",
    "schema": {
      "departments": [
        "department_name",
        "department_id",
        "department_description",
        "other_details"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "student_enrolment": [
        "degree_program_id",
        "student_enrolment_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many degrees does the engineering department have?",
    "schema": {
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and descriptions of all the sections?",
    "schema": {
      "sections": [
        "section_name",
        "section_description",
        "section_id",
        "course_id"
      ],
      "courses": [
        "course_name",
        "course_description",
        "course_id"
      ],
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment.student_id = students.student_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and descriptions for all the sections?",
    "schema": {
      "sections": [
        "section_name",
        "section_description",
        "section_id",
        "course_id"
      ],
      "courses": [
        "course_name",
        "course_description",
        "course_id",
        "other_details"
      ],
      "student_enrolment_courses": [
        "course_id",
        "student_course_id",
        "student_enrolment_id"
      ],
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "email_address"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and id of courses having at most 2 sections?",
    "schema": {
      "courses": [
        "course_id",
        "course_name",
        "course_description"
      ],
      "sections": [
        "section_id",
        "course_id"
      ],
      "addresses": [
        "address_id"
      ],
      "departments": []
    },
    "fk": [
      "sections.course_id = courses.course_id"
    ],
    "db_contents": {
      "courses": [
        [],
        [],
        []
      ],
      "sections": [
        [],
        []
      ],
      "addresses": [
        []
      ],
      "departments": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names and ids of every course with less than 2 sections?",
    "schema": {
      "sections": [
        "course_id",
        "section_name",
        "section_id",
        "section_description"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "departments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "List the section_name in reversed lexicographical order.",
    "schema": {
      "sections": [
        "section_name",
        "section_id",
        "course_id",
        "section_description"
      ],
      "courses": [
        "course_name",
        "course_id",
        "course_description",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names of the sections in reverse alphabetical order?",
    "schema": {
      "sections": [
        "section_name",
        "section_description",
        "course_id",
        "section_id"
      ],
      "courses": [
        "course_name",
        "course_description",
        "course_id",
        "other_details"
      ],
      "students": [
        "first_name",
        "last_name",
        "middle_name",
        "student_id"
      ],
      "student_enrolment": [
        "student_id",
        "semester_id",
        "degree_program_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment.student_id = students.student_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the semester which most student registered in? Show both the name and the id.",
    "schema": {
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id"
    ],
    "db_contents": {
      "semesters": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "For each semester, what is the name and id of the one with the most students registered?",
    "schema": {
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "student_enrolment": [
        "student_id",
        "semester_id",
        "student_enrolment_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "semesters": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the description of the department whose name has the substring the computer?",
    "schema": {
      "departments": [
        "department_name",
        "department_description",
        "department_id"
      ],
      "degree_programs": [
        "degree_summary_name",
        "department_id",
        "degree_summary_description"
      ],
      "addresses": [],
      "courses": []
    },
    "fk": [
      "degree_programs.department_id = departments.department_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        []
      ],
      "addresses": [],
      "courses": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the department description for the one whose name has the word computer?",
    "schema": {
      "departments": [
        "department_description",
        "department_name",
        "department_id",
        "other_details"
      ],
      "degree_programs": [
        "degree_summary_description",
        "degree_summary_name",
        "degree_program_id",
        "department_id"
      ],
      "courses": [
        "course_description",
        "course_name",
        "course_id",
        "other_details"
      ],
      "student_enrolment": [
        "degree_program_id",
        "student_id",
        "student_enrolment_id",
        "semester_id"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
    "schema": {
      "student_enrolment": [
        "student_id",
        "degree_program_id",
        "semester_id"
      ],
      "degree_programs": [
        "degree_program_id"
      ],
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "semesters": [
        "semester_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "student_enrolment": [
        [],
        [],
        []
      ],
      "degree_programs": [
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "semesters": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
    "schema": {
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "semesters": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "schema": {
      "degree_programs": [
        "degree_summary_name",
        "department_id",
        "degree_summary_description",
        "degree_program_id"
      ],
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "student_id"
      ],
      "student_enrolment": [
        "degree_program_id",
        "student_id",
        "semester_id",
        "student_enrolment_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id",
        "student_course_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "degree_programs": [
        [
          "Bachelor"
        ],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
    "schema": {
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "student_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the kind of program which most number of students are enrolled in?",
    "schema": {
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the degree summary name that has the most number of students enrolled?",
    "schema": {
      "degree_programs": [
        "degree_program_id",
        "degree_summary_name",
        "department_id",
        "degree_summary_description"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
    "schema": {
      "degree_programs": [
        "degree_program_id",
        "degree_summary_name",
        "department_id",
        "degree_summary_description"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "student_id",
        "semester_id"
      ],
      "students": [
        "student_id",
        "first_name",
        "last_name",
        "current_address_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the program id and the summary of the degree that has the most students enrolled?",
    "schema": {
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
    "schema": {
      "student_enrolment": [
        "student_id",
        "student_enrolment_id",
        "degree_program_id"
      ],
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "degree_programs": [
        "degree_program_id",
        "degree_summary_name",
        "degree_summary_description",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id",
        "student_course_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "student_enrolment": [
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
    "schema": {
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which semesters do not have any student enrolled? List the semester name.",
    "schema": {
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "semesters": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the semester with no students enrolled?",
    "schema": {
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "semesters": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are all the course names of the courses which ever have students enrolled in?",
    "schema": {
      "student_enrolment_courses": [
        "course_id",
        "student_enrolment_id",
        "student_course_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the names of all courses that have some students enrolled?",
    "schema": {
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "student_enrolment_courses": [
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What's the name of the course with most number of enrollments?",
    "schema": {
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id",
        "student_course_id"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the name of the course with the most students enrolled?",
    "schema": {
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
    "schema": {
      "students": [
        "last_name",
        "current_address_id",
        "permanent_address_id",
        "first_name",
        "student_id"
      ],
      "addresses": [
        "state_province_county",
        "address_id",
        "line_1",
        "line_2"
      ],
      "student_enrolment": [
        "degree_program_id",
        "student_id",
        "student_enrolment_id",
        "semester_id"
      ],
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "transcripts": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
    "schema": {
      "students": [
        "last_name",
        "student_id",
        "current_address_id",
        "permanent_address_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date and id of the transcript with at least 2 course results.",
    "schema": {
      "transcripts": [
        "transcript_date",
        "transcript_id",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "courses": [
        "course_name",
        "course_id",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the date and id of the transcript with at least 2 courses listed?",
    "schema": {
      "transcripts": [
        "transcript_id",
        "transcript_date"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id"
      ],
      "student_enrolment": [
        "student_enrolment_id"
      ],
      "courses": [
        "course_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        []
      ],
      "student_enrolment": [
        []
      ],
      "courses": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "schema": {
      "students": [
        "first_name",
        "last_name",
        "cell_mobile_number",
        "student_id",
        "permanent_address_id",
        "current_address_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id"
    ],
    "db_contents": {
      "students": [
        [
          "Timmothy"
        ],
        [
          "Ward"
        ],
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "departments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the mobile phone number of the student named Timmothy Ward ?",
    "schema": {
      "students": [
        "first_name",
        "last_name",
        "cell_mobile_number",
        "student_id",
        "permanent_address_id",
        "current_address_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id"
    ],
    "db_contents": {
      "students": [
        [
          "Timmothy"
        ],
        [
          "Ward"
        ],
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "schema": {
      "students": [
        "date_first_registered",
        "first_name",
        "middle_name",
        "last_name",
        "permanent_address_id",
        "current_address_id",
        "student_id"
      ],
      "student_enrolment": [
        "student_id",
        "degree_program_id",
        "semester_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "transcripts": [
        "transcript_id",
        "transcript_date"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "transcripts": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name of the first student to register?",
    "schema": {
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "student_id"
      ],
      "student_enrolment": [
        "student_id",
        "student_enrolment_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id"
      ],
      "transcripts": []
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        []
      ],
      "student_enrolment_courses": [
        []
      ],
      "transcripts": []
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "schema": {
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "student_id"
      ],
      "student_enrolment": [
        "student_id",
        "student_enrolment_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id"
      ],
      "transcripts": [
        "transcript_date"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        []
      ],
      "student_enrolment_courses": [
        []
      ],
      "transcripts": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "schema": {
      "students": [
        "first_name",
        "middle_name",
        "last_name",
        "student_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "transcripts": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "schema": {
      "students": [
        "first_name",
        "student_id",
        "current_address_id",
        "permanent_address_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "schema": {
      "students": [
        "first_name",
        "permanent_address_id",
        "current_address_id",
        "student_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Which address holds the most number of students currently? List the address id and all lines.",
    "schema": {
      "students": [
        "current_address_id",
        "permanent_address_id",
        "student_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "student_enrolment": [
        "student_id"
      ],
      "courses": [
        "course_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        []
      ],
      "courses": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id, line 1, and line 2 of the address with the most students?",
    "schema": {
      "students": [
        "student_id",
        "current_address_id",
        "permanent_address_id",
        "first_name"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "On average, when were the transcripts printed?",
    "schema": {
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "transcript_contents.transcript_id = transcripts.transcript_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the average transcript date?",
    "schema": {
      "transcripts": [
        "transcript_date",
        "transcript_id",
        "other_details"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "transcript_contents.transcript_id = transcripts.transcript_id",
      "transcript_contents.student_course_id = student_enrolment_courses.student_course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "When is the first transcript released? List the date and details.",
    "schema": {
      "transcripts": [
        "transcript_date",
        "other_details",
        "transcript_id"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "transcript_contents.transcript_id = transcripts.transcript_id",
      "transcript_contents.student_course_id = student_enrolment_courses.student_course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "schema": {
      "transcripts": [
        "transcript_date",
        "transcript_id"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ]
    },
    "fk": [
      "transcript_contents.transcript_id = transcripts.transcript_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many transcripts are released?",
    "schema": {
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "transcript_contents": [
        "student_course_id",
        "transcript_id"
      ]
    },
    "fk": [
      "transcript_contents.transcript_id = transcripts.transcript_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many transcripts are listed?",
    "schema": {
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "transcript_contents": [
        "student_course_id",
        "transcript_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "transcript_contents.transcript_id = transcripts.transcript_id",
      "transcript_contents.student_course_id = student_enrolment_courses.student_course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the last transcript release date?",
    "schema": {
      "transcripts": [
        "transcript_date",
        "transcript_id",
        "other_details"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "student_enrolment": [
        "student_id",
        "student_enrolment_id",
        "degree_program_id",
        "semester_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id",
        "student_course_id",
        "course_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "transcript_contents.transcript_id = transcripts.transcript_id",
      "transcript_contents.student_course_id = student_enrolment_courses.student_course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "When was the last transcript released?",
    "schema": {
      "transcripts": [
        "transcript_date",
        "transcript_id",
        "other_details"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "students": [
        "student_id",
        "date_left",
        "current_address_id",
        "permanent_address_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "transcript_contents.transcript_id = transcripts.transcript_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "schema": {
      "student_enrolment_courses": [
        "student_enrolment_id",
        "course_id",
        "student_course_id"
      ],
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "transcripts": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "schema": {
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "courses": [
        [],
        [],
        [],
        []
      ],
      "transcripts": [
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Show the date of the transcript which shows the least number of results, also list the id.",
    "schema": {
      "transcripts": [
        "transcript_date",
        "transcript_id"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "student_enrolment_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "other_details"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "transcript_contents.transcript_id = transcripts.transcript_id",
      "transcript_contents.student_course_id = student_enrolment_courses.student_course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        []
      ],
      "student_enrolment": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the date and id of the transcript with the least number of results?",
    "schema": {
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "transcript_contents": [
        "transcript_id",
        "student_course_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "transcript_contents.transcript_id = transcripts.transcript_id",
      "transcript_contents.student_course_id = student_enrolment_courses.student_course_id"
    ],
    "db_contents": {
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
    "schema": {
      "degree_programs": [
        "degree_program_id",
        "department_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        [
          "Bachelor",
          "Master"
        ],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "semesters": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
    "schema": {
      "degree_programs": [
        "degree_program_id",
        "degree_summary_name",
        "degree_summary_description"
      ],
      "semesters": [
        "semester_id",
        "semester_name",
        "semester_description"
      ],
      "students": [
        "student_id",
        "first_name",
        "middle_name",
        "last_name"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "student_enrolment.student_id = students.student_id",
      "student_enrolment.semester_id = semesters.semester_id",
      "student_enrolment.degree_program_id = degree_programs.degree_program_id"
    ],
    "db_contents": {
      "degree_programs": [
        [],
        [],
        []
      ],
      "semesters": [
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "How many different addresses do the students currently live?",
    "schema": {
      "students": [
        "current_address_id",
        "permanent_address_id",
        "student_id",
        "first_name"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "courses": [
        "course_id",
        "course_name",
        "course_description",
        "other_details"
      ],
      "departments": [
        "department_id",
        "department_name",
        "department_description",
        "other_details"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "departments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the different addresses that have students living there?",
    "schema": {
      "students": [
        "current_address_id",
        "permanent_address_id",
        "student_id",
        "first_name"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "transcripts": [
        "transcript_id",
        "transcript_date",
        "other_details"
      ],
      "transcript_contents": [
        "student_course_id",
        "transcript_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "transcript_contents.transcript_id = transcripts.transcript_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "transcripts": [
        [],
        [],
        []
      ],
      "transcript_contents": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "List all the student details in reversed lexicographical order.",
    "schema": {
      "students": [
        "last_name",
        "first_name",
        "middle_name",
        "student_id",
        "permanent_address_id",
        "current_address_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "schema": {
      "departments": [
        "department_name",
        "department_description",
        "department_id",
        "other_details"
      ],
      "students": [
        "other_student_details",
        "last_name",
        "middle_name",
        "first_name",
        "permanent_address_id",
        "current_address_id"
      ],
      "addresses": [
        "other_address_details",
        "country",
        "state_province_county",
        "zip_postcode",
        "address_id"
      ],
      "degree_programs": [
        "degree_summary_name",
        "degree_summary_description",
        "department_id",
        "degree_program_id"
      ]
    },
    "fk": [
      "degree_programs.department_id = departments.department_id",
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id"
    ],
    "db_contents": {
      "departments": [
        [],
        [],
        [],
        []
      ],
      "students": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        [],
        []
      ],
      "degree_programs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Describe the section h.",
    "schema": {
      "sections": [
        "section_name",
        "section_description",
        "section_id",
        "course_id"
      ],
      "courses": [
        "course_name",
        "course_description",
        "course_id",
        "other_details"
      ],
      "student_enrolment_courses": [
        "student_course_id",
        "course_id",
        "student_enrolment_id"
      ],
      "student_enrolment": [
        "student_enrolment_id",
        "degree_program_id",
        "semester_id",
        "student_id"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What is the description for the section named h?",
    "schema": {
      "sections": [
        "section_description",
        "section_name",
        "section_id",
        "course_id"
      ],
      "courses": [
        "course_description",
        "course_name",
        "course_id",
        "other_details"
      ],
      "student_enrolment_courses": [
        "course_id",
        "student_enrolment_id",
        "student_course_id"
      ],
      "student_enrolment": [
        "other_details",
        "student_enrolment_id",
        "degree_program_id",
        "semester_id"
      ]
    },
    "fk": [
      "sections.course_id = courses.course_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id",
      "student_enrolment_courses.course_id = courses.course_id"
    ],
    "db_contents": {
      "sections": [
        [],
        [],
        [],
        []
      ],
      "courses": [
        [],
        [],
        [],
        []
      ],
      "student_enrolment_courses": [
        [],
        [],
        []
      ],
      "student_enrolment": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
    "schema": {
      "students": [
        "first_name",
        "cell_mobile_number",
        "permanent_address_id",
        "current_address_id",
        "student_id"
      ],
      "addresses": [
        "country",
        "address_id"
      ],
      "student_enrolment": [
        "student_id",
        "student_enrolment_id"
      ],
      "student_enrolment_courses": [
        "student_enrolment_id"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id",
      "student_enrolment.student_id = students.student_id",
      "student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [
          "Haiti"
        ],
        []
      ],
      "student_enrolment": [
        [],
        []
      ],
      "student_enrolment_courses": [
        []
      ]
    }
  },
  {
    "db_id": "student_transcripts_tracking",
    "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
    "schema": {
      "students": [
        "first_name",
        "cell_mobile_number",
        "permanent_address_id",
        "current_address_id"
      ],
      "addresses": [
        "address_id",
        "line_1",
        "line_2",
        "line_3"
      ]
    },
    "fk": [
      "students.permanent_address_id = addresses.address_id",
      "students.current_address_id = addresses.address_id"
    ],
    "db_contents": {
      "students": [
        [],
        [],
        [],
        []
      ],
      "addresses": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the title of all cartoons in alphabetical order.",
    "schema": {
      "cartoon": [
        "title",
        "id",
        "directed_by",
        "written_by",
        "channel"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "schema": {
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List all cartoon directed by \"Ben Jones\".",
    "schema": {
      "cartoon": [
        "directed_by",
        "id",
        "title",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Ben Jones"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "schema": {
      "cartoon": [
        "directed_by",
        "title",
        "id",
        "channel"
      ],
      "tv_series": [
        "channel",
        "id"
      ],
      "tv_channel": [
        "series_name",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Ben Jones"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        []
      ],
      "tv_channel": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "How many cartoons were written by \"Joseph Kuhr\"?",
    "schema": {
      "cartoon": [
        "written_by",
        "id",
        "title",
        "directed_by",
        "channel"
      ],
      "tv_series": [
        "id",
        "episode",
        "air_date",
        "rating",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Joseph Kuhr"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "schema": {
      "cartoon": [
        "written_by",
        "id",
        "title",
        "directed_by",
        "channel"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Joseph Kuhr"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "list all cartoon titles and their directors ordered by their air date",
    "schema": {
      "cartoon": [
        "title",
        "directed_by",
        "original_air_date"
      ],
      "tv_series": [
        "air_date"
      ]
    },
    "fk": [],
    "db_contents": {
      "cartoon": [
        [],
        [],
        []
      ],
      "tv_series": [
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the name and directors of all the cartoons that are ordered by air date?",
    "schema": {
      "cartoon": [
        "title",
        "directed_by",
        "original_air_date",
        "id",
        "channel"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "schema": {
      "cartoon": [
        "title",
        "directed_by",
        "id",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [
          "Ben Jones",
          "Brandon Vietti"
        ],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "schema": {
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [
          "Ben Jones",
          "Brandon Vietti"
        ],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "schema": {
      "tv_channel": [
        "country",
        "id",
        "series_name",
        "language"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the country with the most number of TV Channels and how many does it have?",
    "schema": {
      "tv_channel": [
        "country",
        "id",
        "series_name",
        "language"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the number of different series names and contents in the TV Channel table.",
    "schema": {
      "tv_channel": [
        "series_name",
        "content",
        "id",
        "country"
      ]
    },
    "fk": [],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "How many different series and contents are listed in the TV Channel table?",
    "schema": {
      "tv_channel": [
        "series_name",
        "content",
        "id",
        "country"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "schema": {
      "tv_channel": [
        "series_name",
        "content",
        "country",
        "language",
        "id"
      ],
      "tv_series": [
        "channel",
        "episode",
        "air_date",
        "rating"
      ],
      "cartoon": [
        "channel",
        "title",
        "directed_by",
        "written_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the content of the series Sky Radio?",
    "schema": {
      "tv_channel": [
        "series_name",
        "content",
        "country",
        "language",
        "id"
      ],
      "tv_series": [
        "channel",
        "episode",
        "air_date",
        "rating"
      ],
      "cartoon": [
        "channel",
        "title",
        "directed_by",
        "written_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "schema": {
      "tv_channel": [
        "series_name",
        "package_option",
        "id",
        "country"
      ],
      "tv_series": [
        "channel",
        "episode",
        "air_date",
        "rating"
      ],
      "cartoon": [
        "channel",
        "title",
        "directed_by",
        "written_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [
          "Option"
        ],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "schema": {
      "tv_channel": [
        "series_name",
        "package_option",
        "id"
      ],
      "tv_series": [
        "channel"
      ],
      "cartoon": [
        "channel",
        "title"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [
          "Option"
        ],
        []
      ],
      "tv_series": [
        []
      ],
      "cartoon": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "How many TV Channel using language English?",
    "schema": {
      "tv_channel": [
        "language",
        "id",
        "series_name",
        "country"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "English"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "How many TV Channels use the English language?",
    "schema": {
      "tv_channel": [
        "language",
        "id",
        "series_name",
        "country"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "English"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "schema": {
      "tv_channel": [
        "language",
        "id",
        "series_name",
        "country"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "schema": {
      "tv_channel": [
        "language",
        "id",
        "series_name"
      ],
      "tv_series": [
        "channel",
        "id"
      ],
      "cartoon": [
        "channel",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        []
      ],
      "cartoon": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List each language and the number of TV Channels using it.",
    "schema": {
      "tv_channel": [
        "language",
        "id"
      ],
      "tv_series": [
        "channel"
      ],
      "cartoon": [
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        []
      ],
      "tv_series": [
        []
      ],
      "cartoon": [
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "For each language, list the number of TV Channels that use it.",
    "schema": {
      "tv_channel": [
        "language",
        "id",
        "series_name",
        "country"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
    "schema": {
      "tv_channel": [
        "series_name",
        "id",
        "country",
        "language"
      ],
      "cartoon": [
        "title",
        "channel",
        "id",
        "directed_by"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [
          "The Rise of the Blue Beetle!"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
    "schema": {
      "cartoon": [
        "title",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "id"
      ],
      "tv_series": [
        "channel",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "The Rise of the Blue Beetle!"
        ],
        []
      ],
      "tv_channel": [
        [],
        []
      ],
      "tv_series": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
    "schema": {
      "cartoon": [
        "title",
        "channel",
        "directed_by",
        "written_by"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ],
      "tv_series": [
        "channel",
        "episode",
        "air_date",
        "rating"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
    "schema": {
      "tv_channel": [
        "series_name",
        "id"
      ],
      "cartoon": [
        "title",
        "channel"
      ],
      "tv_series": [
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Sky Radio"
        ],
        []
      ],
      "cartoon": [
        [],
        []
      ],
      "tv_series": [
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the Episode of all TV series sorted by rating.",
    "schema": {
      "tv_series": [
        "episode",
        "rating",
        "air_date",
        "channel"
      ],
      "cartoon": [
        "title",
        "original_air_date",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are all of the episodes ordered by ratings?",
    "schema": {
      "tv_series": [
        "rating",
        "episode",
        "air_date",
        "viewers_m",
        "channel"
      ],
      "cartoon": [
        "title",
        "original_air_date",
        "directed_by",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
    "schema": {
      "tv_series": [
        "rating",
        "episode",
        "id",
        "air_date",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "id",
        "country",
        "language"
      ],
      "cartoon": [
        "title",
        "id",
        "directed_by",
        "written_by",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "schema": {
      "tv_series": [
        "rating",
        "episode",
        "id",
        "air_date",
        "channel"
      ],
      "cartoon": [
        "channel"
      ],
      "tv_channel": [
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        []
      ],
      "tv_channel": [
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is minimum and maximum share of TV series?",
    "schema": {
      "tv_series": [
        "share",
        "id",
        "episode",
        "air_date",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the maximum and minimum share for the TV series?",
    "schema": {
      "tv_series": [
        "share",
        "id",
        "episode",
        "air_date",
        "channel"
      ],
      "cartoon": [
        "id",
        "title",
        "directed_by",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "schema": {
      "tv_series": [
        "episode",
        "air_date",
        "id",
        "rating",
        "channel"
      ],
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [
          "A Love of a Lifetime"
        ],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "schema": {
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share"
      ],
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date"
      ]
    },
    "fk": [],
    "db_contents": {
      "tv_series": [
        [
          "A Love of a Lifetime"
        ],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "schema": {
      "tv_series": [
        "episode",
        "weekly_rank",
        "id",
        "air_date",
        "channel"
      ],
      "cartoon": [
        "title",
        "id",
        "channel",
        "directed_by"
      ],
      "tv_channel": [
        "series_name",
        "id",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [
          "A Love of a Lifetime"
        ],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "schema": {
      "tv_series": [
        "episode",
        "weekly_rank",
        "air_date",
        "rating",
        "channel"
      ],
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [
          "A Love of a Lifetime"
        ],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
    "schema": {
      "tv_series": [
        "episode",
        "channel",
        "air_date",
        "rating"
      ],
      "tv_channel": [
        "series_name",
        "id",
        "country",
        "language"
      ],
      "cartoon": [
        "channel",
        "title",
        "id",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [
          "A Love of a Lifetime"
        ],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
    "schema": {
      "tv_series": [
        "episode",
        "id",
        "air_date",
        "rating",
        "channel"
      ],
      "cartoon": [
        "title",
        "id",
        "directed_by",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "id",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [
          "A Love of a Lifetime"
        ],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
    "schema": {
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ],
      "tv_channel": [
        "series_name",
        "country",
        "language",
        "content",
        "id"
      ],
      "cartoon": [
        "title",
        "directed_by",
        "written_by",
        "original_air_date",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the episode for the TV series named \"Sky Radio\"?",
    "schema": {
      "tv_channel": [
        "series_name",
        "id",
        "country",
        "language"
      ],
      "tv_series": [
        "episode",
        "id",
        "air_date",
        "rating",
        "channel"
      ],
      "cartoon": [
        "title",
        "id",
        "directed_by",
        "written_by",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Sky Radio"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "schema": {
      "cartoon": [
        "directed_by",
        "id",
        "title",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "How many cartoons did each director create?",
    "schema": {
      "cartoon": [
        "directed_by",
        "id",
        "title",
        "written_by",
        "channel"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "Find the production code and channel of the most recently aired cartoon .",
    "schema": {
      "cartoon": [
        "production_code",
        "channel",
        "id",
        "title"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the produdction code and channel of the most recent cartoon ?",
    "schema": {
      "cartoon": [
        "production_code",
        "channel"
      ],
      "tv_series": [
        "channel"
      ],
      "tv_channel": [
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [],
        []
      ],
      "tv_series": [
        []
      ],
      "tv_channel": [
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "schema": {
      "tv_channel": [
        "hight_definition_tv",
        "package_option",
        "id"
      ],
      "tv_series": [
        "channel"
      ],
      "cartoon": [
        "channel",
        "title"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        []
      ],
      "tv_series": [
        []
      ],
      "cartoon": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "schema": {
      "tv_channel": [
        "hight_definition_tv",
        "package_option",
        "series_name",
        "country",
        "id"
      ],
      "tv_series": [
        "channel",
        "air_date",
        "rating"
      ],
      "cartoon": [
        "channel",
        "title",
        "original_air_date",
        "production_code"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [
          "Option"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "schema": {
      "cartoon": [
        "written_by",
        "channel",
        "title",
        "id"
      ],
      "tv_channel": [
        "id",
        "country",
        "series_name",
        "language"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Todd Casey"
        ],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "schema": {
      "cartoon": [
        "written_by",
        "id",
        "title",
        "directed_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ]
    },
    "fk": [
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Todd Casey"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
    "schema": {
      "cartoon": [
        "written_by",
        "channel",
        "id"
      ],
      "tv_channel": [
        "country",
        "id"
      ],
      "tv_series": [
        "channel",
        "id"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Todd Casey"
        ],
        [],
        []
      ],
      "tv_channel": [
        [],
        []
      ],
      "tv_series": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the countries that are not playing cartoons written by Todd Casey?",
    "schema": {
      "cartoon": [
        "written_by",
        "title",
        "id",
        "channel"
      ],
      "tv_channel": [
        "country",
        "id",
        "series_name"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Todd Casey"
        ],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "schema": {
      "cartoon": [
        "directed_by",
        "title",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country"
      ],
      "tv_series": [
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Ben Jones",
          "Michael Chang"
        ],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        []
      ],
      "tv_series": [
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "schema": {
      "cartoon": [
        "directed_by",
        "channel",
        "title",
        "written_by"
      ],
      "tv_channel": [
        "country",
        "series_name",
        "language",
        "content",
        "id"
      ],
      "tv_series": [
        "channel",
        "episode",
        "air_date",
        "rating"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Ben Jones",
          "Michael Chang"
        ],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "schema": {
      "tv_channel": [
        "language",
        "pixel_aspect_ratio_par",
        "country",
        "id"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "channel",
        "id",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "English"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "schema": {
      "tv_channel": [
        "pixel_aspect_ratio_par",
        "country",
        "series_name",
        "language",
        "id"
      ],
      "tv_series": [
        "channel",
        "air_date",
        "rating",
        "share"
      ],
      "cartoon": [
        "channel",
        "title",
        "directed_by",
        "written_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        [
          "English"
        ],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "schema": {
      "tv_channel": [
        "id",
        "country",
        "series_name",
        "language"
      ],
      "tv_series": [
        "id",
        "channel",
        "episode",
        "air_date"
      ],
      "cartoon": [
        "id",
        "channel",
        "title",
        "directed_by"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "schema": {
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "tv_series": [
        "id",
        "episode",
        "air_date",
        "rating",
        "channel"
      ],
      "cartoon": [
        "id",
        "title",
        "directed_by",
        "written_by",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
    "schema": {
      "cartoon": [
        "directed_by",
        "id",
        "title",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Ben Jones"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
    "schema": {
      "cartoon": [
        "directed_by",
        "id",
        "title",
        "written_by",
        "channel"
      ],
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "tv_series": [
        "channel",
        "id",
        "episode",
        "air_date"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "cartoon": [
        [
          "Ben Jones"
        ],
        [],
        [],
        [],
        []
      ],
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
    "schema": {
      "tv_channel": [
        "id",
        "series_name",
        "country",
        "language"
      ],
      "cartoon": [
        "id",
        "title",
        "directed_by",
        "written_by",
        "channel"
      ],
      "tv_series": [
        "id",
        "episode",
        "air_date",
        "rating",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [],
        [
          "Ben Jones"
        ],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "tvshow",
    "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
    "schema": {
      "tv_channel": [
        "package_option",
        "id",
        "series_name",
        "country"
      ],
      "cartoon": [
        "title",
        "directed_by",
        "id",
        "written_by",
        "channel"
      ],
      "tv_series": [
        "episode",
        "air_date",
        "rating",
        "share",
        "channel"
      ]
    },
    "fk": [
      "tv_series.channel = tv_channel.id",
      "cartoon.channel = tv_channel.id"
    ],
    "db_contents": {
      "tv_channel": [
        [
          "Option"
        ],
        [],
        [],
        []
      ],
      "cartoon": [
        [],
        [
          "Ben Jones"
        ],
        [],
        [],
        []
      ],
      "tv_series": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "How many poker players are there?",
    "schema": {
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Count the number of poker players.",
    "schema": {
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "List the earnings of poker players in descending order.",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the earnings of poker players, ordered descending by value?",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id"
      ],
      "people": [
        "people_id",
        "name",
        "nationality"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "List the final tables made and the best finishes of poker players.",
    "schema": {
      "poker_player": [
        "final_table_made",
        "best_finish",
        "poker_player_id",
        "people_id"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the final tables made and best finishes for all poker players?",
    "schema": {
      "poker_player": [
        "final_table_made",
        "best_finish",
        "poker_player_id",
        "people_id"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the average earnings of poker players?",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the average earnings across all poker players.",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "nationality",
        "people_id",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the money rank of the poker player with the highest earnings?",
    "schema": {
      "poker_player": [
        "earnings",
        "money_rank",
        "poker_player_id",
        "people_id"
      ],
      "people": [
        "people_id",
        "nationality"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the money rank of the player with the greatest earnings.",
    "schema": {
      "poker_player": [
        "earnings",
        "money_rank",
        "best_finish",
        "final_table_made",
        "people_id"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "schema": {
      "poker_player": [
        "final_table_made",
        "earnings",
        "poker_player_id",
        "best_finish",
        "people_id"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "schema": {
      "poker_player": [
        "final_table_made",
        "earnings",
        "poker_player_id",
        "people_id"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players?",
    "schema": {
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the names of all the poker players.",
    "schema": {
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players whose earnings is higher than 300000?",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "name",
        "people_id",
        "nationality",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Give the names of poker players who have earnings above 300000.",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "people_id",
        "nationality",
        "name",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "List the names of poker players ordered by the final tables made in ascending order.",
    "schema": {
      "poker_player": [
        "final_table_made",
        "poker_player_id",
        "people_id",
        "best_finish"
      ],
      "people": [
        "people_id",
        "name",
        "nationality",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
    "schema": {
      "poker_player": [
        "final_table_made",
        "poker_player_id",
        "people_id",
        "best_finish"
      ],
      "people": [
        "name",
        "people_id",
        "nationality",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the birth date of the poker player with the lowest earnings?",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "birth_date",
        "people_id",
        "nationality",
        "name"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the birth date of the poker player with the lowest earnings.",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "birth_date",
        "people_id",
        "nationality",
        "name"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the money rank of the tallest poker player?",
    "schema": {
      "poker_player": [
        "people_id",
        "money_rank",
        "final_table_made",
        "best_finish"
      ],
      "people": [
        "height",
        "people_id",
        "nationality",
        "name"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the money rank of the poker player with the greatest height.",
    "schema": {
      "people": [
        "height",
        "people_id",
        "nationality",
        "name"
      ],
      "poker_player": [
        "poker_player_id",
        "people_id",
        "money_rank",
        "final_table_made"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the average earnings of poker players with height higher than 200?",
    "schema": {
      "people": [
        "height",
        "people_id",
        "nationality",
        "name"
      ],
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Give average earnings of poker players who are taller than 200.",
    "schema": {
      "people": [
        "height",
        "people_id",
        "nationality",
        "name"
      ],
      "poker_player": [
        "earnings",
        "people_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of poker players in descending order of earnings?",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "name",
        "people_id",
        "nationality",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the names of poker players sorted by their earnings descending.",
    "schema": {
      "poker_player": [
        "earnings",
        "poker_player_id",
        "people_id",
        "final_table_made"
      ],
      "people": [
        "name",
        "people_id",
        "nationality",
        "birth_date"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "poker_player": [
        [],
        [],
        [],
        []
      ],
      "people": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are different nationalities of people and the corresponding number of people from each nation?",
    "schema": {
      "people": [
        "nationality",
        "name",
        "people_id",
        "birth_date"
      ],
      "poker_player": [
        "people_id",
        "final_table_made",
        "best_finish",
        "money_rank"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "How many people are there of each nationality?",
    "schema": {
      "people": [
        "nationality",
        "people_id"
      ],
      "poker_player": [
        "people_id",
        "poker_player_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What is the most common nationality of people?",
    "schema": {
      "people": [
        "nationality",
        "name",
        "people_id",
        "birth_date"
      ],
      "poker_player": [
        "people_id",
        "final_table_made",
        "best_finish",
        "money_rank"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Give the nationality that is most common across all people.",
    "schema": {
      "people": [
        "nationality",
        "name",
        "birth_date",
        "height",
        "people_id"
      ],
      "poker_player": [
        "people_id",
        "final_table_made",
        "best_finish",
        "money_rank"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the nationalities that are shared by at least two people?",
    "schema": {
      "people": [
        "nationality",
        "people_id",
        "name",
        "birth_date"
      ],
      "poker_player": [
        "people_id",
        "poker_player_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Return the nationalities for which there are two or more people.",
    "schema": {
      "people": [
        "nationality",
        "people_id",
        "name",
        "birth_date"
      ],
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "List the names and birth dates of people in ascending alphabetical order of name.",
    "schema": {
      "people": [
        "name",
        "birth_date",
        "people_id",
        "nationality"
      ],
      "poker_player": [
        "people_id",
        "poker_player_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "schema": {
      "people": [
        "name",
        "birth_date",
        "people_id",
        "nationality"
      ],
      "poker_player": [
        "people_id",
        "poker_player_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Show names of people whose nationality is not \"Russia\".",
    "schema": {
      "people": [
        "nationality",
        "name",
        "birth_date",
        "height",
        "people_id"
      ],
      "poker_player": [
        "people_id",
        "final_table_made",
        "best_finish",
        "money_rank"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [
          "Russia"
        ],
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of people who are not from Russia?",
    "schema": {
      "people": [
        "nationality",
        "name",
        "birth_date",
        "height",
        "people_id"
      ],
      "poker_player": [
        "people_id",
        "final_table_made",
        "best_finish",
        "money_rank"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [
          "Russia"
        ],
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "List the names of people that are not poker players.",
    "schema": {
      "people": [
        "name",
        "people_id"
      ],
      "poker_player": [
        "people_id",
        "poker_player_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "What are the names of people who do not play poker?",
    "schema": {
      "people": [
        "name",
        "people_id",
        "nationality",
        "birth_date"
      ],
      "poker_player": [
        "people_id",
        "poker_player_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "How many distinct nationalities are there?",
    "schema": {
      "people": [
        "nationality",
        "people_id",
        "name",
        "birth_date"
      ],
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "poker_player",
    "question": "Count the number of different nationalities.",
    "schema": {
      "people": [
        "nationality",
        "people_id",
        "name",
        "birth_date"
      ],
      "poker_player": [
        "poker_player_id",
        "people_id",
        "final_table_made",
        "best_finish"
      ]
    },
    "fk": [
      "poker_player.people_id = people.people_id"
    ],
    "db_contents": {
      "people": [
        [],
        [],
        [],
        []
      ],
      "poker_player": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "How many states are there?",
    "schema": {
      "area_code_state": [
        "state"
      ],
      "votes": [
        "state",
        "contestant_number"
      ],
      "contestants": [
        "contestant_number"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "area_code_state": [
        []
      ],
      "votes": [
        [],
        []
      ],
      "contestants": [
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "List the contestant numbers and names, ordered by contestant name descending.",
    "schema": {
      "contestants": [
        "contestant_number",
        "contestant_name"
      ],
      "votes": [
        "contestant_number",
        "created",
        "state"
      ],
      "area_code_state": [
        "state"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "contestants": [
        [],
        []
      ],
      "votes": [
        [],
        [],
        []
      ],
      "area_code_state": [
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "List the vote ids, phone numbers and states of all votes.",
    "schema": {
      "votes": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number"
      ],
      "area_code_state": [
        "area_code",
        "state"
      ],
      "contestants": [
        "contestant_number",
        "contestant_name"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [],
        [],
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ],
      "contestants": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What are the maximum and minimum values of area codes?",
    "schema": {
      "area_code_state": [
        "area_code",
        "state"
      ],
      "votes": [
        "state",
        "vote_id",
        "phone_number",
        "contestant_number"
      ]
    },
    "fk": [
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "area_code_state": [
        [],
        []
      ],
      "votes": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What is last date created of votes from the state 'CA'?",
    "schema": {
      "votes": [
        "created",
        "state",
        "contestant_number"
      ],
      "area_code_state": [
        "state"
      ],
      "contestants": [
        "contestant_number"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [],
        [
          "CA"
        ],
        []
      ],
      "area_code_state": [
        [
          "CA"
        ]
      ],
      "contestants": [
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "schema": {
      "contestants": [
        "contestant_name",
        "contestant_number"
      ],
      "votes": [
        "contestant_number",
        "state",
        "vote_id",
        "phone_number"
      ],
      "area_code_state": [
        "state",
        "area_code"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "contestants": [
        [
          "Jessie Alloway"
        ],
        []
      ],
      "votes": [
        [],
        [],
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What are the distinct states and create time of all votes?",
    "schema": {
      "votes": [
        "state",
        "created",
        "vote_id",
        "contestant_number"
      ],
      "area_code_state": [
        "state",
        "area_code"
      ],
      "contestants": [
        "contestant_number",
        "contestant_name"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [],
        [],
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ],
      "contestants": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
    "schema": {
      "contestants": [
        "contestant_number",
        "contestant_name"
      ],
      "votes": [
        "contestant_number",
        "created",
        "vote_id",
        "phone_number",
        "state"
      ],
      "area_code_state": [
        "state",
        "area_code"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "contestants": [
        [],
        []
      ],
      "votes": [
        [],
        [],
        [],
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
    "schema": {
      "votes": [
        "contestant_number",
        "vote_id",
        "created",
        "phone_number",
        "state"
      ],
      "contestants": [
        "contestant_number",
        "contestant_name"
      ],
      "area_code_state": [
        "state",
        "area_code"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [],
        [],
        [],
        [],
        []
      ],
      "contestants": [
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What are the number of votes from state 'NY' or 'CA'?",
    "schema": {
      "votes": [
        "state",
        "contestant_number",
        "phone_number",
        "vote_id"
      ],
      "area_code_state": [
        "state",
        "area_code"
      ],
      "contestants": [
        "contestant_number",
        "contestant_name"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [
          "CA",
          "NY"
        ],
        [],
        [],
        []
      ],
      "area_code_state": [
        [
          "CA",
          "NY"
        ],
        []
      ],
      "contestants": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "How many contestants did not get voted?",
    "schema": {
      "contestants": [
        "contestant_number",
        "contestant_name"
      ],
      "votes": [
        "vote_id",
        "phone_number",
        "state",
        "contestant_number"
      ],
      "area_code_state": [
        "area_code",
        "state"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "contestants": [
        [],
        []
      ],
      "votes": [
        [],
        [],
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What is the area code in which the most voters voted?",
    "schema": {
      "votes": [
        "state",
        "phone_number",
        "contestant_number",
        "created"
      ],
      "area_code_state": [
        "area_code",
        "state"
      ],
      "contestants": [
        "contestant_number",
        "contestant_name"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [],
        [],
        [],
        []
      ],
      "area_code_state": [
        [],
        []
      ],
      "contestants": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "schema": {
      "votes": [
        "created",
        "state",
        "phone_number",
        "contestant_number"
      ],
      "contestants": [
        "contestant_name",
        "contestant_number"
      ],
      "area_code_state": [
        "state"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "votes": [
        [],
        [],
        [],
        []
      ],
      "contestants": [
        [
          "Tabatha Gehling"
        ],
        []
      ],
      "area_code_state": [
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "schema": {
      "contestants": [
        "contestant_number",
        "contestant_name"
      ],
      "area_code_state": [
        "area_code",
        "state"
      ],
      "votes": [
        "vote_id",
        "state",
        "contestant_number"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "contestants": [
        [],
        [
          "Kelly Clauss",
          "Tabatha Gehling"
        ]
      ],
      "area_code_state": [
        [],
        []
      ],
      "votes": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "voter_1",
    "question": "Return the names of the contestants whose names contain the substring 'Al' .",
    "schema": {
      "contestants": [
        "contestant_name",
        "contestant_number"
      ],
      "votes": [
        "contestant_number",
        "created",
        "state"
      ],
      "area_code_state": [
        "state"
      ]
    },
    "fk": [
      "votes.contestant_number = contestants.contestant_number",
      "votes.state = area_code_state.state"
    ],
    "db_contents": {
      "contestants": [
        [],
        []
      ],
      "votes": [
        [],
        [],
        []
      ],
      "area_code_state": [
        [
          "AL"
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of all the countries that became independent after 1950?",
    "schema": {
      "country": [
        "name",
        "indepyear",
        "code"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": [],
      "city": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": [],
      "city": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the names of the nations that were founded after 1950.",
    "schema": {
      "country": [
        "name",
        "indepyear",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many countries have a republic as their form of government?",
    "schema": {
      "country": [
        "governmentform",
        "name",
        "code"
      ],
      "city": [
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Republic"
        ],
        [],
        []
      ],
      "city": [
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many countries have governments that are republics?",
    "schema": {
      "country": [
        "governmentform",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "name",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Republic"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total surface area of the countries in the Caribbean region?",
    "schema": {
      "country": [
        "region",
        "surfacearea",
        "code",
        "name"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "city": [
        "countrycode",
        "name",
        "district",
        "population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Caribbean"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [
          "Caribbean"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How much surface area do the countires in the Carribean cover together?",
    "schema": {
      "country": [
        "name",
        "continent",
        "surfacearea",
        "code"
      ],
      "city": [
        "countrycode",
        "name",
        "population"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which continent is Anguilla in?",
    "schema": {
      "country": [
        "name",
        "continent",
        "code"
      ],
      "city": [
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Anguilla"
        ],
        [],
        []
      ],
      "city": [
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the continent name which Anguilla belongs to?",
    "schema": {
      "country": [
        "continent",
        "code",
        "name",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Anguilla"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which region is the city Kabul located in?",
    "schema": {
      "city": [
        "name",
        "district",
        "countrycode"
      ],
      "country": [
        "region",
        "code",
        "name"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [
          "Kabul"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What region is Kabul in?",
    "schema": {
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "country": [
        "region",
        "name",
        "code",
        "continent"
      ],
      "countrylanguage": [
        "language",
        "isofficial",
        "percentage",
        "countrycode"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [
          "Kabul"
        ],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which language is the most popular in Aruba?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "localname"
      ],
      "city": [
        "countrycode",
        "name"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [
          "Aruba"
        ],
        [
          "Aruba"
        ]
      ],
      "city": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What language is predominantly spoken in Aruba?",
    "schema": {
      "country": [
        "localname",
        "name",
        "code",
        "continent"
      ],
      "countrylanguage": [
        "language",
        "isofficial",
        "percentage",
        "countrycode"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Aruba"
        ],
        [
          "Aruba"
        ],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the population and life expectancies in Brazil?",
    "schema": {
      "country": [
        "name",
        "population",
        "lifeexpectancy",
        "code"
      ],
      "city": [
        "countrycode",
        "population"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Brazil"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give me Brazil's population and life expectancies.",
    "schema": {
      "country": [
        "population",
        "lifeexpectancy",
        "name",
        "code"
      ],
      "city": [
        "population",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "percentage",
        "language",
        "countrycode",
        "isofficial"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Brazil"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the region and population of Angola?",
    "schema": {
      "country": [
        "region",
        "population",
        "code"
      ],
      "city": [
        "population",
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What region does Angola belong to and what is its population?",
    "schema": {
      "country": [
        "name",
        "region",
        "population",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Angola"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "schema": {
      "country": [
        "region",
        "lifeexpectancy",
        "name",
        "code"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Central Africa"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How long is the people's average life expectancy in Central Africa?",
    "schema": {
      "country": [
        "continent",
        "lifeexpectancy",
        "name",
        "region",
        "code"
      ],
      "city": [
        "name",
        "district",
        "population",
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Africa"
        ],
        [],
        [],
        [
          "Central Africa"
        ],
        []
      ],
      "city": [
        [],
        [
          "Central"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "schema": {
      "country": [
        "name",
        "continent",
        "lifeexpectancy",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "percentage"
      ],
      "sqlite_sequence": [
        "name"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Asia"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "schema": {
      "country": [
        "continent",
        "name",
        "lifeexpectancy",
        "code"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "city": [
        "countrycode",
        "name",
        "district",
        "population"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Asia"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total population and maximum GNP in Asia?",
    "schema": {
      "country": [
        "continent",
        "population",
        "gnp",
        "name",
        "code"
      ],
      "city": [
        "population",
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Asia"
        ],
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "surfacearea"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Asia"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the average life expectancy in African countries that are republics?",
    "schema": {
      "country": [
        "continent",
        "governmentform",
        "lifeexpectancy",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Africa"
        ],
        [
          "Republic"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "schema": {
      "country": [
        "continent",
        "governmentform",
        "lifeexpectancy",
        "code"
      ],
      "city": [
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Africa"
        ],
        [
          "Republic"
        ],
        [],
        []
      ],
      "city": [
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total surface area of the continents Asia and Europe?",
    "schema": {
      "country": [
        "continent",
        "surfacearea",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Asia",
          "Europe"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the total surface area covered by countries in Asia or Europe.",
    "schema": {
      "country": [
        "code",
        "continent",
        "surfacearea"
      ],
      "city": [
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Asia",
          "Europe"
        ],
        []
      ],
      "city": [
        []
      ],
      "countrylanguage": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How many people live in Gelderland district?",
    "schema": {
      "city": [
        "district",
        "population",
        "countrycode"
      ],
      "country": [
        "name",
        "population",
        "code"
      ],
      "countrylanguage": [
        "countrycode",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [
          "Gelderland"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total population of Gelderland district?",
    "schema": {
      "city": [
        "district",
        "population",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [
          "Gelderland"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "schema": {
      "country": [
        "governmentform",
        "gnp",
        "population",
        "code"
      ],
      "city": [
        "countrycode",
        "population",
        "id",
        "name"
      ],
      "sqlite_sequence": [],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "US Territory"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "schema": {
      "country": [
        "governmentform",
        "gnp",
        "population",
        "code"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "city": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "US Territory"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        []
      ],
      "city": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How many unique languages are spoken in the world?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the number of distinct languages used around the world?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How many type of governments are in Africa?",
    "schema": {
      "country": [
        "name",
        "continent",
        "governmentform",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "id",
        "district"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Africa"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many different forms of governments are there in Africa?",
    "schema": {
      "country": [
        "governmentform",
        "continent",
        "code",
        "name"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Africa"
        ],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of languages used in Aruba?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "localname",
        "governmentform"
      ],
      "city": [
        "countrycode",
        "name",
        "district"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [
          "Aruba"
        ],
        [
          "Aruba"
        ],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many languages are spoken in Aruba?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "country": [
        "code",
        "name"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [
          "Aruba"
        ]
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many official languages does Afghanistan have?",
    "schema": {
      "country": [
        "name",
        "code",
        "localname",
        "continent"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Afghanistan"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many official languages are spoken in Afghanistan?",
    "schema": {
      "country": [
        "name",
        "code",
        "continent",
        "region"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Afghanistan"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is name of the country that speaks the largest number of languages?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "name",
        "code",
        "code2"
      ],
      "city": [
        "countrycode",
        "name"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the name of the nation that uses the greatest amount of languages.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "country": [
        "code",
        "name"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Which continent has the most diverse languages?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "continent",
        "code",
        "name",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which continent speaks the most languages?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "continent",
        "code"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many countries speak both English and Dutch?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "name",
        "code",
        "code2",
        "continent"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [
          "Dutch",
          "English"
        ],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the number of nations that use English and Dutch?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Dutch",
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of nations speak both English and French?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English",
          "French"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the names of nations that speak both English and French.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English",
          "French"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of nations where both English and French are official languages?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "governmentform",
        "headofstate"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English",
          "French"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the names of countries with English and French as official languages.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "countrycode",
        "name",
        "district",
        "population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English",
          "French"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the number of distinct continents where Chinese is spoken?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "continent",
        "code",
        "name"
      ],
      "city": [
        "countrycode",
        "name",
        "population"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Chinese"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many continents speak Chinese?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "continent",
        "code",
        "name",
        "region"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [
          "Chinese"
        ],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the regions that use English or Dutch?",
    "schema": {
      "country": [
        "region",
        "code",
        "name",
        "continent"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "city": [
        "countrycode",
        "name",
        "district",
        "population"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [
          "Dutch",
          "English"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Which regions speak Dutch or English?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Dutch",
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the countries where either English or Dutch is the official language ?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Dutch",
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Which countries have either English or Dutch as an official language?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "name",
        "code",
        "continent",
        "region"
      ],
      "city": [
        "countrycode",
        "id",
        "name",
        "district"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Dutch",
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Which language is the most popular on the Asian continent?",
    "schema": {
      "countrylanguage": [
        "language",
        "isofficial",
        "percentage",
        "countrycode"
      ],
      "country": [
        "name",
        "code",
        "continent",
        "population"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [
          "Asia"
        ],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the language that is used by the largest number of Asian nations?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "population"
      ],
      "city": [
        "name",
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [],
        [
          "Asia"
        ],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Which languages are spoken by only one country in republic governments?",
    "schema": {
      "country": [
        "name",
        "governmentform",
        "code"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Republic"
        ],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What languages are only used by a single country with a republic government?",
    "schema": {
      "countrylanguage": [
        "language",
        "isofficial",
        "percentage",
        "countrycode"
      ],
      "country": [
        "name",
        "governmentform",
        "code",
        "continent"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [
          "Republic"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Find the city with the largest population that uses English.",
    "schema": {
      "city": [
        "population",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "population",
        "code",
        "name",
        "continent"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [
          "English"
        ],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the most populace city that speaks English?",
    "schema": {
      "city": [
        "population",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "population",
        "name",
        "code",
        "continent"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [
          "English"
        ],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Asia"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "schema": {
      "country": [
        "name",
        "population",
        "lifeexpectancy",
        "code"
      ],
      "city": [
        "countrycode",
        "name",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is average life expectancy in the countries where English is not the official language?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "population",
        "lifeexpectancy"
      ],
      "city": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the mean life expectancy of countries in which English is not the official language.",
    "schema": {
      "country": [
        "lifeexpectancy",
        "code",
        "name",
        "continent"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of people living in the nations that do not use English?",
    "schema": {
      "country": [
        "population",
        "code",
        "name",
        "continent"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "city": [
        "population",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "How many people live in countries that do not speak English?",
    "schema": {
      "country": [
        "population",
        "name",
        "code",
        "continent"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [
          "English"
        ],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the official language spoken in the country whose head of state is Beatrix?",
    "schema": {
      "country": [
        "headofstate",
        "code"
      ],
      "countrylanguage": [
        "language",
        "countrycode"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Beatrix"
        ],
        []
      ],
      "countrylanguage": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
    "schema": {
      "country": [
        "headofstate",
        "name",
        "code"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "city": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Beatrix"
        ],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "city": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
    "schema": {
      "country": [
        "code",
        "name",
        "indepyear",
        "governmentform"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial"
      ],
      "city": [
        "id",
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Europe"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Which countries have greater area than that of any country in Europe?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Europe"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the African countries that have a  population less than any country in Asia?",
    "schema": {
      "country": [
        "continent",
        "population",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "population",
        "name",
        "id"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "percentage",
        "isofficial"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Africa",
          "Asia"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "population"
      ],
      "city": [
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Africa",
          "Asia"
        ],
        []
      ],
      "city": [
        []
      ],
      "countrylanguage": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "schema": {
      "country": [
        "continent",
        "population",
        "name",
        "code"
      ],
      "city": [
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Africa",
          "Asia"
        ],
        [],
        [],
        []
      ],
      "city": [
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "schema": {
      "country": [
        "continent",
        "population",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "population",
        "id",
        "name"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Africa",
          "Asia"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes for countries that do not speak English?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [
          "English"
        ],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the country codes for countries that do not speak English.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes of countries where people use languages other than English?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which cities are in European countries where English is not the official language?",
    "schema": {
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "country": [
        "name",
        "code",
        "continent",
        "capital"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [
          "Europe"
        ],
        []
      ],
      "countrylanguage": [
        [],
        [
          "English"
        ],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of cities in Europe for which English is not the official language?",
    "schema": {
      "country": [
        "name",
        "continent",
        "code"
      ],
      "city": [
        "name",
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Europe"
        ],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        [],
        [
          "English"
        ]
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
    "schema": {
      "country": [
        "continent",
        "code",
        "name",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "id",
        "district"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "Asia"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [
          "Chinese"
        ],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ]
    },
    "fk": [],
    "db_contents": {
      "countrylanguage": [
        [
          "Chinese"
        ],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "schema": {
      "country": [
        "name",
        "indepyear",
        "surfacearea",
        "population",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        [],
        []
      ],
      "city": [
        [
          "Independence"
        ],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "schema": {
      "country": [
        "name",
        "indepyear",
        "surfacearea",
        "population",
        "code"
      ],
      "city": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        [],
        []
      ],
      "city": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the population, name and leader of the country with the largest area?",
    "schema": {
      "country": [
        "name",
        "population",
        "surfacearea",
        "headofstate",
        "code"
      ],
      "city": [
        "countrycode",
        "population",
        "name",
        "district"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "schema": {
      "country": [
        "name",
        "population",
        "headofstate",
        "surfacearea",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "sqlite_sequence": [],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
    "schema": {
      "country": [
        "name",
        "code",
        "population",
        "governmentform"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "schema": {
      "city": [
        "district",
        "population",
        "name",
        "id"
      ]
    },
    "fk": [],
    "db_contents": {
      "city": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "schema": {
      "city": [
        "population",
        "district",
        "name",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "percentage"
      ],
      "sqlite_sequence": [
        "name"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "schema": {
      "country": [
        "governmentform",
        "population",
        "lifeexpectancy",
        "name",
        "code"
      ],
      "city": [
        "countrycode"
      ],
      "sqlite_sequence": [],
      "countrylanguage": [
        "countrycode",
        "language"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        [],
        []
      ],
      "city": [
        []
      ],
      "sqlite_sequence": [],
      "countrylanguage": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "schema": {
      "country": [
        "governmentform",
        "population",
        "lifeexpectancy",
        "code"
      ],
      "city": [
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "schema": {
      "country": [
        "continent",
        "lifeexpectancy",
        "population",
        "name",
        "code"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial"
      ],
      "city": [
        "countrycode",
        "population",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "schema": {
      "country": [
        "continent",
        "population",
        "lifeexpectancy",
        "code"
      ],
      "city": [
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "schema": {
      "country": [
        "name",
        "surfacearea",
        "code",
        "continent"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the names and surface areas of the 5 largest countries.",
    "schema": {
      "country": [
        "name",
        "surfacearea",
        "code",
        "continent"
      ]
    },
    "fk": [],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are names of countries with the top 3 largest population?",
    "schema": {
      "country": [
        "name",
        "population",
        "code",
        "surfacearea"
      ],
      "city": [
        "name",
        "population",
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the names of the 3 most populated countries.",
    "schema": {
      "country": [
        "population",
        "name",
        "code",
        "continent"
      ],
      "city": [
        "population",
        "name",
        "countrycode",
        "district"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of the nations with the 3 lowest populations?",
    "schema": {
      "country": [
        "population",
        "name",
        "code"
      ],
      "city": [
        "population",
        "name",
        "countrycode"
      ],
      "countrylanguage": [
        "countrycode"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the names of the 3 countries with the fewest people.",
    "schema": {
      "country": [
        "population",
        "name",
        "code"
      ],
      "city": [
        "population",
        "name",
        "countrycode"
      ],
      "countrylanguage": [
        "percentage",
        "countrycode",
        "language"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "how many countries are in Asia?",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Asia"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Count the number of countries in Asia.",
    "schema": {
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "id",
        "name",
        "countrycode",
        "district"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "Asia"
        ],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "schema": {
      "country": [
        "name",
        "continent",
        "population",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Europe"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "schema": {
      "country": [
        "name",
        "continent",
        "population",
        "code"
      ],
      "city": [
        "name",
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "language"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [
          "Europe"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "schema": {
      "country": [
        "continent",
        "population",
        "surfacearea",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "population"
      ],
      "countrylanguage": [
        "countrycode",
        "percentage"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [
          "North America"
        ],
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "countrylanguage": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "schema": {
      "country": [
        "population",
        "surfacearea",
        "continent",
        "name",
        "code"
      ],
      "city": [
        "countrycode",
        "population",
        "district",
        "name"
      ],
      "countrylanguage": [
        "countrycode",
        "percentage",
        "language",
        "isofficial"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [
          "North America"
        ],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the cities whose population is between 160000 and 900000?",
    "schema": {
      "city": [
        "population",
        "id",
        "name",
        "countrycode"
      ],
      "country": [
        "population",
        "code",
        "name",
        "capital"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the names of cities that have a population between 160000 and 900000 .",
    "schema": {
      "city": [
        "name",
        "population",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "population"
      ]
    },
    "fk": [
      "city.countrycode = country.code"
    ],
    "db_contents": {
      "city": [
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Which language is spoken by the largest number of countries?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode",
        "isofficial",
        "percentage"
      ],
      "country": [
        "name",
        "code",
        "continent",
        "region"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Give the language that is spoken in the most countries.",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "countrycode",
        "name"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "schema": {
      "countrylanguage": [
        "language",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "population"
      ],
      "city": [
        "name",
        "countrycode",
        "population"
      ],
      "sqlite_sequence": []
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        []
      ],
      "country": [
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        []
      ],
      "sqlite_sequence": []
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "schema": {
      "country": [
        "code",
        "name",
        "population",
        "surfacearea"
      ],
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "country": [
        [],
        [],
        [],
        []
      ],
      "countrylanguage": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "name",
        "code",
        "population",
        "continent"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Spanish"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "schema": {
      "countrylanguage": [
        "language",
        "isofficial",
        "percentage",
        "countrycode"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ],
      "city": [
        "name",
        "countrycode",
        "district",
        "population"
      ],
      "sqlite_sequence": [
        "name",
        "seq"
      ]
    },
    "fk": [
      "city.countrycode = country.code",
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [
          "Spanish"
        ],
        [],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ],
      "city": [
        [],
        [],
        [],
        []
      ],
      "sqlite_sequence": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Spanish"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "world_1",
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "schema": {
      "countrylanguage": [
        "countrycode",
        "language",
        "isofficial",
        "percentage"
      ],
      "country": [
        "code",
        "name",
        "continent",
        "region"
      ]
    },
    "fk": [
      "countrylanguage.countrycode = country.code"
    ],
    "db_contents": {
      "countrylanguage": [
        [],
        [
          "Spanish"
        ],
        [],
        []
      ],
      "country": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "How many conductors are there?",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id",
        "record_company",
        "year_of_founded"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Count the number of conductors.",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "List the names of conductors in ascending order of age.",
    "schema": {
      "conductor": [
        "name",
        "age",
        "conductor_id"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra_id"
      ],
      "performance": [
        "orchestra_id",
        "performance_id"
      ],
      "show": [
        "performance_id"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        []
      ],
      "performance": [
        [],
        []
      ],
      "show": [
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors, ordered by age?",
    "schema": {
      "conductor": [
        "name",
        "age",
        "conductor_id",
        "nationality"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra_id",
        "orchestra",
        "record_company"
      ],
      "performance": [
        "orchestra_id",
        "performance_id",
        "type",
        "date"
      ],
      "show": [
        "performance_id",
        "show_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors whose nationalities are not \"USA\"?",
    "schema": {
      "conductor": [
        "name",
        "nationality",
        "conductor_id"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra",
        "orchestra_id",
        "record_company"
      ],
      "performance": [
        "orchestra_id",
        "type",
        "date",
        "official_ratings_(millions)",
        "performance_id"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [
          "USA"
        ],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Return the names of conductors that do not have the nationality \"USA\".",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        [
          "USA"
        ]
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What is the average attendance of shows?",
    "schema": {
      "show": [
        "attendance",
        "performance_id"
      ],
      "performance": [
        "performance_id",
        "orchestra_id"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id"
      ],
      "conductor": [
        "conductor_id"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "show": [
        [],
        []
      ],
      "performance": [
        [],
        []
      ],
      "orchestra": [
        [],
        []
      ],
      "conductor": [
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Return the average attendance across all shows.",
    "schema": {
      "show": [
        "attendance",
        "show_id",
        "performance_id",
        "if_first_show"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id",
        "orchestra",
        "record_company"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "show": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "schema": {
      "performance": [
        "share",
        "type",
        "performance_id",
        "orchestra_id"
      ],
      "show": [
        "performance_id"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id"
      ],
      "conductor": [
        "conductor_id"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "performance": [
        [],
        [
          "Live final"
        ],
        [],
        []
      ],
      "show": [
        []
      ],
      "orchestra": [
        [],
        []
      ],
      "conductor": [
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "schema": {
      "performance": [
        "type",
        "share",
        "orchestra_id",
        "performance_id"
      ],
      "show": [
        "performance_id"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id"
      ],
      "conductor": [
        "conductor_id"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "performance": [
        [
          "Live final"
        ],
        [],
        [],
        []
      ],
      "show": [
        []
      ],
      "orchestra": [
        [],
        []
      ],
      "conductor": [
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "How many different nationalities do conductors have?",
    "schema": {
      "conductor": [
        "nationality",
        "conductor_id",
        "name",
        "age"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra_id",
        "orchestra",
        "record_company"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Count the number of different nationalities of conductors.",
    "schema": {
      "conductor": [
        "nationality",
        "conductor_id",
        "name",
        "age"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra_id",
        "orchestra",
        "record_company"
      ],
      "performance": [
        "orchestra_id",
        "performance_id",
        "type",
        "date"
      ],
      "show": [
        "performance_id",
        "show_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "List names of conductors in descending order of years of work.",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "schema": {
      "conductor": [
        "name",
        "conductor_id"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra_id",
        "year_of_founded"
      ],
      "performance": [
        "orchestra_id",
        "type",
        "date",
        "performance_id"
      ],
      "show": [
        "performance_id",
        "attendance"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "List the name of the conductor with the most years of work.",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id",
        "record_company",
        "year_of_founded"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "performance": [
        "performance_id",
        "orchestra_id"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id"
      ],
      "show": [
        "show_id",
        "performance_id"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        []
      ],
      "orchestra": [
        [],
        []
      ],
      "show": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Show the names of conductors and the orchestras they have conducted.",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Show the names of conductors that have conducted more than one orchestras.",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors who have conducted at more than one orchestra?",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Show the name of the conductor that has conducted the most number of orchestras.",
    "schema": {
      "conductor": [
        "name",
        "age",
        "nationality",
        "year_of_work",
        "conductor_id"
      ],
      "orchestra": [
        "conductor_id",
        "orchestra",
        "record_company",
        "year_of_founded",
        "orchestra_id"
      ],
      "performance": [
        "orchestra_id",
        "type",
        "date",
        "official_ratings_(millions)",
        "performance_id"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What is the name of the conductor who has conducted the most orchestras?",
    "schema": {
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
    "schema": {
      "orchestra": [
        "conductor_id",
        "orchestra",
        "orchestra_id"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "year_of_work"
      ],
      "performance": [
        "orchestra_id",
        "type",
        "date",
        "performance_id"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "conductor_id",
        "year_of_founded"
      ],
      "conductor": [
        "conductor_id",
        "name"
      ],
      "performance": [
        "performance_id",
        "orchestra_id"
      ],
      "show": [
        "show_id",
        "performance_id"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        []
      ],
      "conductor": [
        [],
        []
      ],
      "performance": [
        [],
        []
      ],
      "show": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Please show the different record companies and the corresponding number of orchestras.",
    "schema": {
      "orchestra": [
        "record_company",
        "orchestra",
        "conductor_id",
        "orchestra_id"
      ],
      "conductor": [
        "conductor_id",
        "name"
      ],
      "performance": [
        "orchestra_id",
        "official_ratings_(millions)",
        "performance_id"
      ],
      "show": [
        "performance_id",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        []
      ],
      "performance": [
        [],
        [],
        []
      ],
      "show": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "How many orchestras does each record company manage?",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "schema": {
      "orchestra": [
        "major_record_format",
        "orchestra_id",
        "conductor_id",
        "orchestra"
      ],
      "performance": [
        "orchestra_id",
        "performance_id",
        "type",
        "date"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "List the record company shared by the most number of orchestras.",
    "schema": {
      "orchestra": [
        "record_company",
        "orchestra_id",
        "conductor_id",
        "orchestra"
      ],
      "performance": [
        "orchestra_id",
        "performance_id",
        "type",
        "date"
      ],
      "show": [
        "performance_id",
        "result",
        "attendance",
        "if_first_show"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What is the record company used by the greatest number of orchestras?",
    "schema": {
      "orchestra": [
        "record_company",
        "orchestra_id",
        "conductor_id",
        "orchestra"
      ],
      "performance": [
        "orchestra_id",
        "performance_id",
        "type",
        "date"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "List the names of orchestras that have no performance.",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the orchestras that do not have any performances?",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ]
    },
    "fk": [
      "performance.orchestra_id = orchestra.orchestra_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "orchestra",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "schema": {
      "orchestra": [
        "record_company",
        "year_of_founded",
        "orchestra_id",
        "conductor_id"
      ],
      "performance": [
        "orchestra_id",
        "performance_id",
        "type",
        "date"
      ],
      "show": [
        "performance_id",
        "show_id",
        "if_first_show",
        "result"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "schema": {
      "orchestra": [
        "major_record_format",
        "orchestra_id",
        "orchestra",
        "conductor_id"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ],
      "show": [
        "show_id",
        "performance_id",
        "if_first_show",
        "result"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [
          "CD",
          "DVD"
        ],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "schema": {
      "orchestra": [
        "major_record_format",
        "orchestra_id",
        "conductor_id",
        "orchestra"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ],
      "performance": [
        "orchestra_id",
        "type",
        "date",
        "official_ratings_(millions)",
        "performance_id"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "orchestra": [
        [
          "CD",
          "DVD"
        ],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "Show the years in which orchestras that have given more than one performance are founded.",
    "schema": {
      "orchestra": [
        "orchestra_id",
        "year_of_founded",
        "conductor_id",
        "record_company"
      ],
      "performance": [
        "performance_id",
        "orchestra_id",
        "type",
        "date"
      ]
    },
    "fk": [
      "performance.orchestra_id = orchestra.orchestra_id"
    ],
    "db_contents": {
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "performance": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "orchestra",
    "question": "What are years of founding for orchestras that have had more than a single performance?",
    "schema": {
      "performance": [
        "orchestra_id",
        "date",
        "performance_id",
        "type"
      ],
      "orchestra": [
        "orchestra_id",
        "conductor_id",
        "year_of_founded",
        "orchestra"
      ],
      "show": [
        "performance_id",
        "if_first_show",
        "result",
        "attendance"
      ],
      "conductor": [
        "conductor_id",
        "name",
        "age",
        "nationality"
      ]
    },
    "fk": [
      "orchestra.conductor_id = conductor.conductor_id",
      "performance.orchestra_id = orchestra.orchestra_id",
      "show.performance_id = performance.performance_id"
    ],
    "db_contents": {
      "performance": [
        [],
        [],
        [],
        []
      ],
      "orchestra": [
        [],
        [],
        [],
        []
      ],
      "show": [
        [],
        [],
        [],
        []
      ],
      "conductor": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many high schoolers are there?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Count the number of high schoolers.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names and grades of each high schooler.",
    "schema": {
      "highschooler": [
        "name",
        "grade",
        "id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names and grades for each high schooler?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show all the grades of the high schoolers.",
    "schema": {
      "highschooler": [
        "grade",
        "id",
        "name"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What is the grade of each high schooler?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What grade is Kyle in?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Return the grade for the high schooler named Kyle.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of all high schoolers in grade 10.",
    "schema": {
      "highschooler": [
        "name",
        "id",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of all high schoolers in grade 10?",
    "schema": {
      "highschooler": [
        "name",
        "grade",
        "id"
      ]
    },
    "fk": [],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the ID of the high schooler named Kyle.",
    "schema": {
      "highschooler": [
        "id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        []
      ],
      "likes": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What is Kyle's id?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many high schoolers are there in grade 9 or 10?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Count the number of high schoolers in grades 9 or 10.",
    "schema": {
      "highschooler": [
        "grade",
        "id",
        "name"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the number of high schoolers for each grade.",
    "schema": {
      "highschooler": [
        "grade",
        "id",
        "name"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many high schoolers are in each grade?",
    "schema": {
      "highschooler": [
        "grade",
        "id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Which grade has the most high schoolers?",
    "schema": {
      "highschooler": [
        "grade",
        "id",
        "name"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Return the grade that has the greatest number of high schoolers.",
    "schema": {
      "highschooler": [
        "grade",
        "id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show me all grades that have at least 4 students.",
    "schema": {
      "highschooler": [
        "grade",
        "id",
        "name"
      ]
    },
    "fk": [],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Which grades have 4 or more high schoolers?",
    "schema": {
      "highschooler": [
        "grade",
        "id",
        "name"
      ],
      "friend": [
        "friend_id",
        "student_id"
      ],
      "likes": [
        "liked_id",
        "student_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "schema": {
      "friend": [
        "student_id",
        "friend_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "friend": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many friends does each student have?",
    "schema": {
      "friend": [
        "student_id",
        "friend_id"
      ],
      "highschooler": [
        "id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "friend": [
        [],
        []
      ],
      "highschooler": [
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of high school students and their corresponding number of friends.",
    "schema": {
      "highschooler": [
        "name",
        "id",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of the high schoolers and how many friends does each have?",
    "schema": {
      "highschooler": [
        "name",
        "id",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of friends?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Return the name of the high school student with the most friends.",
    "schema": {
      "friend": [
        "student_id",
        "friend_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "friend": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of high schoolers who have at least 3 friends.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have 3 or more friends?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of all of the high schooler Kyle's friends.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Return the names of friends of the high school student Kyle.",
    "schema": {
      "highschooler": [
        "name",
        "id",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [
          "Kyle"
        ],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many friends does the high school student Kyle have?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Count the number of friends Kyle has.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show ids of all students who do not have any friends.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the ids of high school students who do not have friends?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show names of all high school students who do not have any friends.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of students who have no friends?",
    "schema": {
      "highschooler": [
        "name",
        "id",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
    "schema": {
      "highschooler": [
        "id",
        "name"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the ids of students who both have friends and are liked?",
    "schema": {
      "highschooler": [
        "id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show name of all students who have some friends and also are liked by someone else.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who both have friends and are liked?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Count the number of likes for each student id.",
    "schema": {
      "likes": [
        "student_id",
        "liked_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many likes correspond to each student id?",
    "schema": {
      "likes": [
        "student_id",
        "liked_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
    "schema": {
      "likes": [
        "student_id",
        "liked_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What is the name of the high schooler who has the greatest number of likes?",
    "schema": {
      "likes": [
        "liked_id",
        "student_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "friend_id",
        "student_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Give the name of the student with the most likes.",
    "schema": {
      "likes": [
        "student_id",
        "liked_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ]
    },
    "fk": [
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of students who have at least 2 likes.",
    "schema": {
      "likes": [
        "student_id",
        "liked_id"
      ],
      "highschooler": [
        "id",
        "name"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of students who have 2 or more likes?",
    "schema": {
      "likes": [
        "student_id",
        "liked_id"
      ],
      "highschooler": [
        "name",
        "id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "likes": [
        [],
        []
      ],
      "highschooler": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
    "schema": {
      "highschooler": [
        "name",
        "grade",
        "id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "How many likes does Kyle have?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "likes": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Return the number of likes that the high schooler named Kyle has.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [
          "Kyle"
        ],
        []
      ],
      "likes": [
        [],
        []
      ],
      "friend": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Find the average grade of all students who have some friends.",
    "schema": {
      "friend": [
        "student_id",
        "friend_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "friend": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What is the average grade of students who have friends?",
    "schema": {
      "friend": [
        "student_id",
        "friend_id"
      ],
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "friend": [
        [],
        []
      ],
      "highschooler": [
        [],
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "Find the minimum grade of students who have no friends.",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "network_1",
    "question": "What is the lowest grade of students who do not have any friends?",
    "schema": {
      "highschooler": [
        "id",
        "name",
        "grade"
      ],
      "friend": [
        "student_id",
        "friend_id"
      ],
      "likes": [
        "student_id",
        "liked_id"
      ]
    },
    "fk": [
      "friend.friend_id = highschooler.id",
      "friend.student_id = highschooler.id",
      "likes.student_id = highschooler.id",
      "likes.liked_id = highschooler.id"
    ],
    "db_contents": {
      "highschooler": [
        [],
        [],
        []
      ],
      "friend": [
        [],
        []
      ],
      "likes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which states have both owners and professionals living there?",
    "schema": {
      "owners": [
        "state",
        "owner_id",
        "first_name",
        "last_name"
      ],
      "professionals": [
        "state",
        "professional_id",
        "role_code",
        "first_name"
      ]
    },
    "fk": [],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the states where both owners and professionals live.",
    "schema": {
      "owners": [
        "state",
        "owner_id"
      ],
      "professionals": [
        "state",
        "professional_id"
      ],
      "breeds": [],
      "charges": []
    },
    "fk": [],
    "db_contents": {
      "owners": [
        [],
        []
      ],
      "professionals": [
        [],
        []
      ],
      "breeds": [],
      "charges": []
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the average age of the dogs who have gone through any treatments?",
    "schema": {
      "dogs": [
        "dog_id",
        "age",
        "date_of_birth",
        "breed_code"
      ],
      "treatments": [
        "dog_id",
        "treatment_id",
        "date_of_treatment",
        "cost_of_treatment",
        "professional_id",
        "treatment_type_code"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "professionals": [
        "professional_id",
        "first_name",
        "last_name"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "professionals": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the average age of the dogs who went through treatments.",
    "schema": {
      "dogs": [
        "age",
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ],
      "treatments": [
        "dog_id",
        "date_of_treatment",
        "treatment_id",
        "professional_id"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ]
    },
    "fk": [
      "dogs.breed_code = breeds.breed_code",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
    "schema": {
      "professionals": [
        "professional_id",
        "last_name",
        "cell_number",
        "state"
      ],
      "treatments": [
        "professional_id",
        "treatment_id",
        "treatment_type_code",
        "date_of_treatment"
      ],
      "owners": [
        "owner_id",
        "last_name",
        "cell_number",
        "state"
      ]
    },
    "fk": [
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        [
          "Indiana"
        ]
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        [
          "Indiana"
        ]
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
    "schema": {
      "professionals": [
        "professional_id",
        "last_name",
        "cell_number",
        "state"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "dogs": [
        "dog_id",
        "owner_id"
      ],
      "treatments": [
        "treatment_id",
        "professional_id",
        "treatment_type_code",
        "dog_id"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        [
          "Indiana"
        ]
      ],
      "treatment_types": [
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
    "schema": {
      "dogs": [
        "dog_id",
        "owner_id",
        "name",
        "abandoned_yn"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
    "schema": {
      "dogs": [
        "name",
        "owner_id",
        "dog_id",
        "abandoned_yn"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which first names are used for professionals or owners but are not used as dog names?",
    "schema": {
      "professionals": [
        "first_name",
        "professional_id",
        "role_code",
        "last_name"
      ],
      "owners": [
        "first_name",
        "owner_id",
        "last_name",
        "email_address"
      ],
      "dogs": [
        "owner_id",
        "breed_code",
        "size_code",
        "name"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
    "schema": {
      "professionals": [
        "first_name",
        "professional_id",
        "role_code"
      ],
      "owners": [
        "first_name",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "name",
        "breed_code"
      ],
      "breeds": [
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        []
      ],
      "owners": [
        [],
        []
      ],
      "dogs": [
        [],
        [],
        []
      ],
      "breeds": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "email_address",
        "first_name"
      ],
      "treatments": [
        "professional_id",
        "treatment_id",
        "dog_id",
        "treatment_type_code"
      ]
    },
    "fk": [
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "email_address",
        "first_name"
      ],
      "treatments": [
        "professional_id",
        "treatment_id",
        "dog_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
    "schema": {
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "email_address"
      ],
      "dogs": [
        "owner_id",
        "dog_id",
        "breed_code",
        "size_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
    "schema": {
      "dogs": [
        "owner_id",
        "dog_id",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street"
      ],
      "treatments": [
        "professional_id",
        "treatment_id",
        "dog_id",
        "treatment_type_code"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "first_name"
      ],
      "treatments": [
        "professional_id",
        "dog_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        []
      ],
      "dogs": [
        []
      ],
      "treatment_types": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the name of the breed with the most dogs?",
    "schema": {
      "dogs": [
        "breed_code",
        "name",
        "dog_id",
        "owner_id",
        "size_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which breed do the most dogs have? Give me the breed name.",
    "schema": {
      "dogs": [
        "breed_code",
        "name",
        "dog_id",
        "owner_id",
        "size_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
    "schema": {
      "owners": [
        "owner_id",
        "last_name",
        "first_name",
        "email_address"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "owner_id",
        "dog_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
    "schema": {
      "owners": [
        "owner_id",
        "last_name",
        "first_name",
        "email_address"
      ],
      "treatments": [
        "treatment_id",
        "cost_of_treatment",
        "date_of_treatment",
        "dog_id",
        "professional_id"
      ],
      "dogs": [
        "owner_id",
        "dog_id",
        "abandoned_yn",
        "breed_code"
      ],
      "professionals": [
        "professional_id",
        "last_name",
        "first_name",
        "role_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the description of the treatment type that costs the least money in total?",
    "schema": {
      "treatments": [
        "treatment_type_code",
        "cost_of_treatment",
        "treatment_id",
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "charges": [],
      "breeds": []
    },
    "fk": [
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "charges": [],
      "breeds": []
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Give me the description of the treatment type whose total cost is the lowest.",
    "schema": {
      "treatments": [
        "treatment_type_code",
        "cost_of_treatment"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ]
    },
    "fk": [
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
    "schema": {
      "owners": [
        "owner_id",
        "zip_code",
        "first_name",
        "last_name"
      ],
      "dogs": [
        "owner_id",
        "dog_id"
      ],
      "charges": [],
      "treatments": [
        "dog_id"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "charges": [],
      "treatments": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
    "schema": {
      "charges": [
        "charge_amount"
      ],
      "treatments": [
        "cost_of_treatment",
        "dog_id"
      ],
      "dogs": [
        "owner_id",
        "dog_id"
      ],
      "owners": [
        "owner_id",
        "zip_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "charges": [
        []
      ],
      "treatments": [
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "owners": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
    "schema": {
      "professionals": [
        "professional_id",
        "cell_number",
        "role_code",
        "first_name"
      ],
      "treatments": [
        "professional_id",
        "treatment_type_code",
        "treatment_id",
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
    "schema": {
      "professionals": [
        "professional_id",
        "cell_number",
        "role_code",
        "first_name"
      ],
      "treatments": [
        "professional_id",
        "treatment_type_code",
        "treatment_id",
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
    "schema": {
      "professionals": [
        "first_name",
        "last_name",
        "professional_id",
        "role_code"
      ],
      "treatments": [
        "professional_id",
        "treatment_id",
        "treatment_type_code",
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ]
    },
    "fk": [
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
    "schema": {
      "treatments": [
        "professional_id",
        "cost_of_treatment",
        "dog_id"
      ],
      "professionals": [
        "professional_id",
        "first_name",
        "last_name"
      ],
      "charges": [],
      "dogs": [
        "dog_id"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        []
      ],
      "charges": [],
      "dogs": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the date of each treatment, together with the first name of the professional who operated it.",
    "schema": {
      "treatments": [
        "date_of_treatment",
        "professional_id",
        "dog_id"
      ],
      "professionals": [
        "first_name",
        "professional_id"
      ],
      "dogs": [
        "dog_id"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        []
      ],
      "professionals": [
        [],
        []
      ],
      "dogs": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the date and the operating professional's first name of each treatment?",
    "schema": {
      "treatments": [
        "date_of_treatment",
        "professional_id",
        "dog_id",
        "treatment_type_code"
      ],
      "professionals": [
        "professional_id",
        "first_name"
      ],
      "dogs": [
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        []
      ],
      "dogs": [
        []
      ],
      "treatment_types": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the cost of each treatment and the corresponding treatment type description.",
    "schema": {
      "treatments": [
        "cost_of_treatment",
        "treatment_type_code",
        "dog_id",
        "professional_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the cost and treatment type description of each treatment?",
    "schema": {
      "treatments": [
        "cost_of_treatment",
        "treatment_type_code",
        "treatment_id",
        "dog_id",
        "professional_id"
      ],
      "treatment_types": [
        "treatment_type_description",
        "treatment_type_code"
      ],
      "charges": [
        "charge_amount",
        "charge_id",
        "charge_type"
      ],
      "professionals": [
        "professional_id",
        "first_name",
        "last_name",
        "email_address"
      ]
    },
    "fk": [
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List each owner's first name, last name, and the size of his for her dog.",
    "schema": {
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "email_address"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "breed_code",
        "size_code"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.size_code = sizes.size_code"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are each owner's first name, last name, and the size of their dog?",
    "schema": {
      "owners": [
        "first_name",
        "last_name",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "size_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List pairs of the owner's first name and the dogs's name.",
    "schema": {
      "owners": [
        "first_name",
        "owner_id",
        "last_name",
        "street"
      ],
      "dogs": [
        "name",
        "owner_id",
        "breed_code",
        "age"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are each owner's first name and their dogs's name?",
    "schema": {
      "owners": [
        "owner_id",
        "first_name",
        "last_name"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "name",
        "breed_code"
      ],
      "breeds": [
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
    "schema": {
      "dogs": [
        "breed_code",
        "name",
        "dog_id",
        "owner_id"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "treatments": [
        "dog_id",
        "treatment_type_code",
        "date_of_treatment",
        "professional_id"
      ]
    },
    "fk": [
      "dogs.breed_code = breeds.breed_code",
      "treatments.dog_id = dogs.dog_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
    "schema": {
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "dogs": [
        "breed_code",
        "name",
        "date_of_birth",
        "date_adopted",
        "dog_id"
      ],
      "treatments": [
        "dog_id",
        "date_of_treatment"
      ],
      "charges": []
    },
    "fk": [
      "dogs.breed_code = breeds.breed_code",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "breeds": [
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        []
      ],
      "charges": []
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "schema": {
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "state"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "name"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        [
          "Virginia"
        ]
      ],
      "dogs": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "schema": {
      "owners": [
        "first_name",
        "owner_id",
        "last_name",
        "street"
      ],
      "dogs": [
        "owner_id",
        "name",
        "dog_id",
        "breed_code",
        "size_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
    "schema": {
      "treatments": [
        "date_of_treatment",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "date_arrived",
        "date_departed",
        "dog_id",
        "breed_code"
      ],
      "professionals": [
        "professional_id",
        "first_name",
        "last_name"
      ],
      "treatment_types": [
        "treatment_type_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        []
      ],
      "treatment_types": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
    "schema": {
      "dogs": [
        "date_arrived",
        "date_departed",
        "dog_id",
        "abandoned_yn"
      ],
      "treatments": [
        "date_of_treatment",
        "dog_id",
        "treatment_id",
        "professional_id"
      ],
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "last_name"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the last name of the owner owning the youngest dog.",
    "schema": {
      "dogs": [
        "owner_id",
        "age",
        "name",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "last_name",
        "first_name"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "treatment_types": []
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "treatment_types": []
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Who owns the youngest dog? Give me his or her last name.",
    "schema": {
      "dogs": [
        "age",
        "owner_id",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "last_name"
      ],
      "breeds": [
        "breed_code"
      ],
      "treatment_types": []
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        []
      ],
      "owners": [
        [],
        []
      ],
      "breeds": [
        []
      ],
      "treatment_types": []
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "schema": {
      "professionals": [
        "email_address",
        "state",
        "professional_id",
        "role_code"
      ],
      "owners": [
        "email_address",
        "state",
        "owner_id",
        "first_name"
      ],
      "dogs": [
        "owner_id",
        "dog_id",
        "abandoned_yn",
        "breed_code"
      ],
      "treatments": [
        "professional_id",
        "dog_id",
        "treatment_id",
        "treatment_type_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [
          "Hawaii",
          "Wisconsin"
        ],
        [],
        []
      ],
      "owners": [
        [],
        [
          "Wisconsin"
        ],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "schema": {
      "professionals": [
        "email_address",
        "state",
        "professional_id"
      ],
      "owners": [
        "email_address",
        "state",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "dog_id"
      ],
      "treatments": [
        "professional_id",
        "dog_id"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [
          "Hawaii",
          "Wisconsin"
        ],
        []
      ],
      "owners": [
        [],
        [
          "Wisconsin"
        ],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "treatments": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the arriving date and the departing date of all the dogs?",
    "schema": {
      "dogs": [
        "date_arrived",
        "date_departed",
        "dog_id",
        "owner_id"
      ],
      "treatments": [
        "date_of_treatment",
        "dog_id",
        "professional_id",
        "treatment_id"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "last_name"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the arrival date and the departure date for all the dogs.",
    "schema": {
      "dogs": [
        "date_arrived",
        "date_departed",
        "dog_id",
        "owner_id",
        "size_code",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How many dogs went through any treatments?",
    "schema": {
      "dogs": [
        "dog_id",
        "owner_id",
        "breed_code",
        "size_code"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Count the number of dogs that went through a treatment.",
    "schema": {
      "treatments": [
        "dog_id",
        "treatment_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "abandoned_yn",
        "breed_code",
        "owner_id"
      ],
      "breeds": [
        "breed_code"
      ],
      "charges": []
    },
    "fk": [
      "dogs.breed_code = breeds.breed_code",
      "treatments.dog_id = dogs.dog_id"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        []
      ],
      "charges": []
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How many professionals have performed any treatment to dogs?",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the number of professionals who have ever treated dogs.",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "last_name"
      ],
      "treatments": [
        "professional_id",
        "treatment_type_code",
        "dog_id"
      ],
      "dogs": [
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        []
      ],
      "dogs": [
        []
      ],
      "treatment_types": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "schema": {
      "professionals": [
        "role_code",
        "street",
        "city",
        "state",
        "professional_id"
      ],
      "owners": [
        "street",
        "city",
        "state",
        "first_name",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "dog_id"
      ],
      "treatments": [
        "professional_id",
        "dog_id"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "treatments": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "schema": {
      "professionals": [
        "role_code",
        "street",
        "city",
        "state"
      ],
      "owners": [
        "street",
        "city",
        "state",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "breed_code"
      ],
      "breeds": [
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "breeds": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "schema": {
      "owners": [
        "first_name",
        "last_name",
        "email_address",
        "state",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "breed_code"
      ],
      "professionals": [
        "first_name",
        "last_name",
        "email_address",
        "state"
      ],
      "breeds": [
        "breed_name",
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "schema": {
      "owners": [
        "first_name",
        "last_name",
        "email_address",
        "state",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "breed_code"
      ],
      "professionals": [],
      "breeds": [
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ],
      "professionals": [],
      "breeds": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How many dogs have an age below the average?",
    "schema": {
      "dogs": [
        "age",
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Count the number of dogs of an age below the average.",
    "schema": {
      "dogs": [
        "age",
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "size_code"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.size_code = sizes.size_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How much does the most recent treatment cost?",
    "schema": {
      "treatments": [
        "date_of_treatment",
        "cost_of_treatment",
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "breed_code",
        "size_code"
      ],
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Show me the cost of the most recently performed treatment.",
    "schema": {
      "treatments": [
        "cost_of_treatment",
        "date_of_treatment",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "professionals": [
        "professional_id",
        "last_name"
      ],
      "dogs": [
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "treatments": [
        [],
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        []
      ],
      "dogs": [
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How many dogs have not gone through any treatment?",
    "schema": {
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Tell me the number of dogs that have not received any treatment .",
    "schema": {
      "dogs": [
        "dog_id",
        "abandoned_yn",
        "breed_code",
        "size_code"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "professionals": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How many owners temporarily do not have any dogs?",
    "schema": {
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the number of owners who do not own any dogs at this moment.",
    "schema": {
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id"
    ],
    "db_contents": {
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How many professionals did not operate any treatment on dogs?",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "street"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the number of professionals who have not treated any dogs.",
    "schema": {
      "professionals": [
        "professional_id",
        "role_code",
        "first_name",
        "last_name"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "schema": {
      "dogs": [
        "abandoned_yn",
        "name",
        "age",
        "weight",
        "owner_id",
        "size_code",
        "breed_code"
      ],
      "owners": [
        "owner_id"
      ],
      "breeds": [
        "breed_code"
      ],
      "sizes": [
        "size_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "owners": [
        []
      ],
      "breeds": [
        []
      ],
      "sizes": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "schema": {
      "dogs": [
        "abandoned_yn",
        "name",
        "age",
        "weight",
        "size_code",
        "breed_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the average age of all the dogs?",
    "schema": {
      "dogs": [
        "age",
        "dog_id",
        "date_of_birth",
        "breed_code",
        "size_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "charges": [
        "charge_id",
        "charge_type",
        "charge_amount"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "charges": [
        [],
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Compute the average age of all the dogs.",
    "schema": {
      "dogs": [
        "age",
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "size_code",
        "breed_code"
      ],
      "owners": [
        "owner_id",
        "first_name",
        "last_name",
        "street"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the age of the oldest dog?",
    "schema": {
      "dogs": [
        "age",
        "date_of_birth",
        "dog_id"
      ],
      "treatments": [
        "dog_id",
        "date_of_treatment",
        "professional_id",
        "treatment_type_code"
      ],
      "treatment_types": [
        "treatment_type_code"
      ],
      "professionals": [
        "professional_id"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        []
      ],
      "professionals": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Tell me the age of the oldest dog.",
    "schema": {
      "dogs": [
        "age",
        "date_of_birth",
        "dog_id",
        "owner_id"
      ],
      "treatment_types": [
        "treatment_type_code"
      ],
      "treatments": [
        "dog_id",
        "treatment_type_code"
      ],
      "owners": [
        "owner_id"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        []
      ],
      "treatments": [
        [],
        []
      ],
      "owners": [
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How much does each charge type costs? List both charge type and amount.",
    "schema": {
      "charges": [
        "charge_type",
        "charge_amount",
        "charge_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "treatments": [
        "treatment_type_code",
        "treatment_id",
        "dog_id",
        "professional_id"
      ],
      "dogs": [
        "dog_id",
        "breed_code",
        "size_code",
        "name"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "charges": [
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List each charge type and its amount.",
    "schema": {
      "charges": [
        "charge_type",
        "charge_amount",
        "charge_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [],
    "db_contents": {
      "charges": [
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "How much does the most expensive charge type costs?",
    "schema": {
      "charges": [
        "charge_type",
        "charge_amount"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "treatments": [
        "treatment_type_code",
        "cost_of_treatment",
        "dog_id"
      ],
      "dogs": [
        "dog_id",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "charges": [
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "treatments": [
        [],
        [],
        []
      ],
      "dogs": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What is the charge amount of the most expensive charge type?",
    "schema": {
      "charges": [
        "charge_type",
        "charge_amount",
        "charge_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "treatments": [
        "treatment_id",
        "dog_id",
        "professional_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "abandoned_yn",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "charges": [
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the email, cell phone and home phone of all the professionals.",
    "schema": {
      "professionals": [
        "email_address",
        "cell_number",
        "home_phone",
        "professional_id"
      ],
      "owners": [
        "email_address",
        "cell_number",
        "home_phone",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "dog_id",
        "abandoned_yn",
        "breed_code"
      ],
      "treatments": [
        "dog_id",
        "professional_id",
        "treatment_id",
        "treatment_type_code"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are the email, cell phone and home phone of each professional?",
    "schema": {
      "professionals": [
        "email_address",
        "cell_number",
        "home_phone",
        "professional_id"
      ],
      "owners": [
        "email_address",
        "cell_number",
        "home_phone",
        "owner_id"
      ],
      "dogs": [
        "owner_id",
        "dog_id",
        "abandoned_yn",
        "breed_code"
      ],
      "treatments": [
        "dog_id",
        "professional_id",
        "treatment_type_code",
        "date_of_treatment"
      ]
    },
    "fk": [
      "dogs.owner_id = owners.owner_id",
      "dogs.owner_id = owners.owner_id",
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "owners": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are all the possible breed type and size type combinations?",
    "schema": {
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ],
      "dogs": [
        "breed_code",
        "size_code"
      ]
    },
    "fk": [
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "breeds": [
        [],
        []
      ],
      "sizes": [
        [],
        []
      ],
      "dogs": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "schema": {
      "dogs": [
        "breed_code",
        "size_code"
      ],
      "breeds": [
        "breed_code",
        "breed_name"
      ],
      "sizes": [
        "size_code",
        "size_description"
      ]
    },
    "fk": [
      "dogs.size_code = sizes.size_code",
      "dogs.breed_code = breeds.breed_code"
    ],
    "db_contents": {
      "dogs": [
        [],
        []
      ],
      "breeds": [
        [],
        []
      ],
      "sizes": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "List the first name of all the professionals along with the description of the treatment they have done.",
    "schema": {
      "professionals": [
        "professional_id",
        "first_name",
        "role_code"
      ],
      "treatments": [
        "professional_id",
        "treatment_id",
        "dog_id",
        "treatment_type_code"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "breed_code",
        "name"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "dog_kennels",
    "question": "What are each professional's first name and description of the treatment they have performed?",
    "schema": {
      "professionals": [
        "professional_id",
        "first_name",
        "role_code",
        "last_name"
      ],
      "treatments": [
        "treatment_id",
        "professional_id",
        "treatment_type_code",
        "dog_id"
      ],
      "treatment_types": [
        "treatment_type_code",
        "treatment_type_description"
      ],
      "dogs": [
        "dog_id",
        "owner_id",
        "name",
        "breed_code"
      ]
    },
    "fk": [
      "treatments.dog_id = dogs.dog_id",
      "treatments.professional_id = professionals.professional_id",
      "treatments.treatment_type_code = treatment_types.treatment_type_code"
    ],
    "db_contents": {
      "professionals": [
        [],
        [],
        [],
        []
      ],
      "treatments": [
        [],
        [],
        [],
        []
      ],
      "treatment_types": [
        [],
        []
      ],
      "dogs": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "How many singers are there?",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "birth_year",
        "net_worth_millions"
      ],
      "song": [
        "song_id",
        "title",
        "singer_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What is the count of singers?",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "birth_year",
        "net_worth_millions"
      ],
      "song": [
        "song_id",
        "title",
        "singer_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "List the name of singers in ascending order of net worth.",
    "schema": {
      "singer": [
        "name",
        "net_worth_millions",
        "singer_id"
      ],
      "song": [
        "title",
        "singer_id",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the names of singers ordered by ascending net worth?",
    "schema": {
      "singer": [
        "name",
        "net_worth_millions",
        "singer_id"
      ],
      "song": [
        "title",
        "singer_id",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the birth year and citizenship of singers?",
    "schema": {
      "singer": [
        "birth_year",
        "citizenship",
        "singer_id",
        "name"
      ],
      "song": [
        "singer_id",
        "title",
        "song_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the birth years and citizenships of the singers?",
    "schema": {
      "singer": [
        "birth_year",
        "citizenship",
        "singer_id",
        "name"
      ],
      "song": [
        "singer_id",
        "title",
        "song_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "List the name of singers whose citizenship is not \"France\".",
    "schema": {
      "singer": [
        "citizenship",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "title",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [
          "France"
        ],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers who are not French citizens?",
    "schema": {
      "singer": [
        "citizenship",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "title",
        "song_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "schema": {
      "singer": [
        "name",
        "birth_year",
        "singer_id",
        "net_worth_millions"
      ],
      "song": [
        "singer_id",
        "title",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "schema": {
      "singer": [
        "name",
        "birth_year",
        "singer_id",
        "net_worth_millions"
      ],
      "song": [
        "singer_id",
        "title",
        "song_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What is the name of the singer with the largest net worth?",
    "schema": {
      "singer": [
        "name",
        "net_worth_millions",
        "singer_id",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "title",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What is the name of the singer who is worth the most?",
    "schema": {
      "singer": [
        "net_worth_millions",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "sales",
        "song_id",
        "title",
        "singer_id"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show different citizenship of singers and the number of singers of each citizenship.",
    "schema": {
      "singer": [
        "citizenship",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "title",
        "song_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "For each citizenship, how many singers are from that country?",
    "schema": {
      "singer": [
        "citizenship",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "title",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Please show the most common citizenship of singers.",
    "schema": {
      "singer": [
        "citizenship",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "sales",
        "highest_position",
        "song_id"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What is the most common singer citizenship ?",
    "schema": {
      "singer": [
        "citizenship",
        "singer_id",
        "name",
        "birth_year"
      ],
      "song": [
        "singer_id",
        "title",
        "song_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "schema": {
      "singer": [
        "citizenship",
        "net_worth_millions",
        "singer_id",
        "name"
      ],
      "song": [
        "sales",
        "highest_position",
        "song_id",
        "title",
        "singer_id"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "For each citizenship, what is the maximum net worth?",
    "schema": {
      "singer": [
        "citizenship",
        "net_worth_millions",
        "singer_id",
        "name"
      ],
      "song": [
        "singer_id",
        "sales",
        "song_id",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show titles of songs and names of singers.",
    "schema": {
      "song": [
        "title",
        "singer_id",
        "song_id",
        "sales"
      ],
      "singer": [
        "name",
        "singer_id",
        "birth_year",
        "net_worth_millions"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "song": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the song titles and singer names?",
    "schema": {
      "song": [
        "title",
        "singer_id",
        "song_id",
        "sales"
      ],
      "singer": [
        "name",
        "singer_id",
        "birth_year",
        "net_worth_millions"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "song": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show distinct names of singers that have songs with sales more than 300000.",
    "schema": {
      "song": [
        "sales",
        "singer_id",
        "title",
        "song_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "birth_year",
        "net_worth_millions"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "song": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "what are the different names of the singers that have sales more than 300000?",
    "schema": {
      "song": [
        "singer_id",
        "title",
        "sales",
        "song_id"
      ],
      "singer": [
        "singer_id",
        "name",
        "birth_year",
        "net_worth_millions"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "song": [
        [],
        [],
        [],
        []
      ],
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers that have more than one song.",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "birth_year",
        "net_worth_millions"
      ],
      "song": [
        "song_id",
        "title",
        "singer_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the names of the singers that have more than one songs?",
    "schema": {
      "singer": [
        "singer_id",
        "name"
      ],
      "song": [
        "song_id",
        "singer_id"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        []
      ],
      "song": [
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show the names of singers and the total sales of their songs.",
    "schema": {
      "singer": [
        "name",
        "singer_id",
        "birth_year",
        "net_worth_millions"
      ],
      "song": [
        "title",
        "singer_id",
        "sales",
        "highest_position"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "For each singer name, what is the total sales for their songs?",
    "schema": {
      "singer": [
        "name",
        "singer_id",
        "birth_year",
        "net_worth_millions"
      ],
      "song": [
        "sales",
        "singer_id",
        "title",
        "song_id"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "List the name of singers that do not have any song.",
    "schema": {
      "singer": [
        "singer_id",
        "name"
      ],
      "song": [
        "singer_id"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        []
      ],
      "song": [
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What is the sname of every sing that does not have any song?",
    "schema": {
      "singer": [
        "singer_id",
        "name",
        "birth_year",
        "net_worth_millions"
      ],
      "song": [
        "song_id",
        "title",
        "singer_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "schema": {
      "singer": [
        "citizenship",
        "birth_year",
        "singer_id",
        "name"
      ],
      "song": [
        "song_id",
        "title",
        "singer_id",
        "sales"
      ]
    },
    "fk": [
      "song.singer_id = singer.singer_id"
    ],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ],
      "song": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "singer",
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "schema": {
      "singer": [
        "citizenship",
        "birth_year",
        "singer_id",
        "name"
      ]
    },
    "fk": [],
    "db_contents": {
      "singer": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "real_estate_properties",
    "question": "How many available features are there in total?",
    "schema": {
      "other_available_features": [
        "feature_id",
        "feature_type_code",
        "feature_name",
        "feature_description"
      ],
      "ref_feature_types": [
        "feature_type_code",
        "feature_type_name"
      ],
      "other_property_features": [
        "feature_id"
      ],
      "ref_property_types": []
    },
    "fk": [
      "other_available_features.feature_type_code = ref_feature_types.feature_type_code",
      "other_property_features.feature_id = other_available_features.feature_id"
    ],
    "db_contents": {
      "other_available_features": [
        [],
        [],
        [],
        []
      ],
      "ref_feature_types": [
        [],
        []
      ],
      "other_property_features": [
        []
      ],
      "ref_property_types": []
    }
  },
  {
    "db_id": "real_estate_properties",
    "question": "What is the feature type name of feature AirCon?",
    "schema": {
      "other_available_features": [
        "feature_type_code",
        "feature_id"
      ],
      "ref_feature_types": [
        "feature_type_code"
      ],
      "other_property_features": [
        "feature_id",
        "property_id"
      ],
      "properties": [
        "apt_feature_1",
        "apt_feature_2",
        "apt_feature_3",
        "fld_feature_1",
        "property_id"
      ]
    },
    "fk": [
      "other_available_features.feature_type_code = ref_feature_types.feature_type_code",
      "other_property_features.property_id = properties.property_id",
      "other_property_features.feature_id = other_available_features.feature_id"
    ],
    "db_contents": {
      "other_available_features": [
        [],
        []
      ],
      "ref_feature_types": [
        []
      ],
      "other_property_features": [
        [],
        []
      ],
      "properties": [
        [],
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "real_estate_properties",
    "question": "Show the property type descriptions of properties belonging to that code.",
    "schema": {
      "properties": [
        "property_type_code",
        "property_id",
        "other_property_details"
      ],
      "ref_property_types": [
        "property_type_code",
        "property_type_description"
      ],
      "other_property_features": [
        "property_id",
        "feature_id",
        "property_feature_description"
      ],
      "other_available_features": [
        "feature_id",
        "feature_type_code",
        "feature_name",
        "feature_description"
      ]
    },
    "fk": [
      "properties.property_type_code = ref_property_types.property_type_code",
      "other_property_features.property_id = properties.property_id",
      "other_property_features.feature_id = other_available_features.feature_id"
    ],
    "db_contents": {
      "properties": [
        [],
        [],
        []
      ],
      "ref_property_types": [
        [],
        []
      ],
      "other_property_features": [
        [],
        [],
        []
      ],
      "other_available_features": [
        [],
        [],
        [],
        []
      ]
    }
  },
  {
    "db_id": "real_estate_properties",
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "schema": {
      "properties": [
        "property_name",
        "property_type_code",
        "room_count",
        "property_address"
      ],
      "ref_property_types": [
        "property_type_code",
        "property_type_description"
      ]
    },
    "fk": [
      "properties.property_type_code = ref_property_types.property_type_code"
    ],
    "db_contents": {
      "properties": [
        [],
        [
          "Apartment",
          "House"
        ],
        [],
        []
      ],
      "ref_property_types": [
        [
          "Apartment",
          "House"
        ],
        []
      ]
    }
  }
]